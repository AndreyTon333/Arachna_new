from aiogram.types import Message, CallbackQuery, InputMediaPhoto
import logging
import database.requests as rq
from lexicon.foto import PHOTO as ph
import keyboards.keybords as kb
from dataclasses import dataclass


from lexicon.lexicon_ru import (list_storage_wardrobe_and_gun_and_craft as LSWGC,
                                list_storage_wardrobe_gun as LSWG,
                                list_storage_trash as LST,
                                list_storage_trash_drag as lstd,
                                list_storage_wardrobe as LSW,
                                list_storage_gun as LSG,
                                LEXICON_STORAGE_WARDROBE as LSW,
                                LEXICON_ALL_THINGS as All_Th,
                                dict_use_storage_trash as dict_u,
                                dict_armor, dict_gun, dict_NPS, dict_percent_xp)

@dataclass
class Backpack:
    no_backpack = "no_backpack"
    backpack_foliage = "backpack_foliage"
    backpack_leana = "backpack_leana"

@dataclass
class Location:
    landing_place = 'landing_place'
    # –≤ –ø—É—Ç–∏
    # –ª—É–≥–∞


# —É–±–∏—Ä–∞–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∫–ª—é—á–∏, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω—ã 0
async def modify_dict_to_without_null (dict_ :dict) -> dict:
    logging.info(f'modify_dict_to_without_null')
    dict_modify: dict = {}
    for key in dict_:
        if dict_[key] != 0:
            dict_modify.update({key: dict_[key]})
    return dict_modify


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ '!100!13!97!13!100!0!0', –∞ –≤—ã–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {100: 2, 97: 1, 13: 2}
# –∏ –°–û–†–¢–ò–†–£–ï–¢, –∏ –£–ë–ò–†–ê–ï–¢ –ù–£–õ–ò, –∏ –û–ë–™–ï–î–ï–ù–Ø–ï–¢ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –∫–ª—é—á–µ
async def modify_str_to_dict (str_ :str) -> dict:
    #logging.info(f'modify_str_to_dict --- str_ = {str_}')
    dict_: dict = {}
    if str_ == 0 or str_ == '':
        return dict_
    #logging.info(f'modify_str_to_dict 1 dict_ = {dict_}')

    if isinstance(str_, str) and '!' in str_:
        list_ = str_.split('!')
    #  –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç !, –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç–æ–π –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        if not list_[0]: # ["", "1",...] - –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ if == None
            list_.pop(0)
    else:
        list_ = [str_]
    #logging.info(f'modify_str_to_dict 1,5 list_ = {list_}')
    list_ = [int(value) for value in list_]
    list_.sort(reverse=True)
    #logging.info(f'modify_str_to_dict 2 list_ = {list_}')
    for value in list_:
        if value not in dict_ and value >0:
            dict_ [value] = 1
            #logging.info(f'modify_str_to_dict 3 dict_ = {dict_}')
        else:
            if value > 0:
                dict_[value]+=1
                #logging.info(f'modify_dict_to_without_null 4 dict_ = {dict_}')
    return dict_


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è –¥–µ–ª–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤. –í —Å–ø–∏—Å–∫–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: –∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
# –≠—Ç–æ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ –∏–∑ –•—Ä–∞–Ω–∏–ª–∏—â–∞ —à–∫–∞—Ñ —Ç–æ–ª—å–∫–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–∞–ª–µ–µ –∏ –Ω–∞–∑–∞–¥
async def modify_dict_to_list_of_list_of_2_elements(dict_: dict) -> list:
    #logging.info(f"modify_dict_to_list_of_list_of_2_elements --- dict_ = {dict_}")
    list_: list = []
    for key, item in dict_.items():
        list_temp: list = [key, item]
        list_.append(list_temp)
    #logging.info(f"modify_dict_to_list_of_list_of_2_elements --- list = {list_}")
    return list_


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {100: 2, 97: 1, 13: 2}, –∞ –≤—ã–¥–∞–µ—Ç —á–∏–ª–æ - —Å—É–º–º—É –≤–µ—â–µ–π
async def modify_dict_to_int_with_count_thinks_value(dict_: dict) -> int:
    #logging.info(f'modify_dict_to_int_with_count_thinks_value --- dict_ = {dict_}')
    int_: int = 0
    for value in dict_.values():
         int_ += value
    return int_


# –∏–∑ —Å–ª–æ–≤–∞—Ä—è {'helmet_kosmonavt': '', 'helmet_wanderer': '!0!98!44!0'} –≤ —Å–ª–æ–≤–∞—Ä—å {'helmet_wanderer': 2}
async def modify_dict_to_dict_with_count_value(dict_: dict) -> dict:
    logging.info(f'modify_dict_to_dict_with_count_value')
    """# –∏–∑ —Å–ª–æ–≤–∞—Ä—è {'helmet_kosmonavt': '', 'helmet_wanderer': '!0!98!44!0'} –≤ —Å–ª–æ–≤–∞—Ä—å {'helmet_wanderer': 2}"""

    dict_without_empty : dict ={}
    for key, value in dict_.items():
        dict_from_str: dict = await modify_str_to_dict(value)
        int_from_dict: int = await modify_dict_to_int_with_count_thinks_value(dict_from_str)
        if int_from_dict>0:
            dict_without_empty.update({key: int_from_dict})
    return dict_without_empty


# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–∫–æ–π —Ä—é–∫–∑–∞–∫ –Ω–∞–¥–µ—Ç: bacpack_foliage, backpack_leana,
# no_backpack –∏ —Å–∫–æ–ª—å–∫–æ —Ç–∞–º –±–∏–æ, –¥–ª—è no_backpak = -1
async def bio_in_what_backpack_put_on(tg_id: int) -> list:
    """# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–∫–æ–π —Ä—é–∫–∑–∞–∫ –Ω–∞–¥–µ—Ç: bacpack_foliage, backpack_leana,
        # no_backpack –∏ —Å–∫–æ–ª—å–∫–æ —Ç–∞–º –±–∏–æ, –¥–ª—è no_backpak = -1"""
    list_backpck_bio: list = [str, int]
    logging.info(f'bio_in_what_backpack_put_on')

    data_ = await rq.get_user_dict(tg_id=tg_id)
    backpack = data_['backpack']
    if backpack == Backpack.no_backpack:
        list_backpck_bio = [backpack, -1]
    elif backpack == Backpack.backpack_foliage:
        foliage = await rq.get_BackpackFoliage(tg_id=tg_id)
        bio = foliage['bio']
        list_backpck_bio = [backpack, bio]
    elif backpack == Backpack.backpack_leana:
        leana = await rq.get_BackpackLeana(tg_id=tg_id)
        bio = leana['bio']
        list_backpck_bio = [backpack, bio]
    return list_backpck_bio


# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–∞–∫–æ–π —Ä—é–∫–∑–∞–∫ –Ω–∞–¥–µ—Ç: 'no_backpack', 'backpack_foliage', 'backpack_leana'
async def what_backpack_put_on(tg_id: int) -> str:
    """
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–∞–∫–æ–π —Ä—é–∫–∑–∞–∫ –Ω–∞–¥–µ—Ç: 'no_backpack', 'backpack_foliage', 'backpack_leana' –±–µ–∑!
    """
    logging.info(f'what_backpack_put_on')
    backpack: str = Backpack.no_backpack   # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–Ω–µ—Ç —Ä—é–∫–∑–∞–∫–∞", –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º
    data_ = (await rq.get_user_dict(tg_id=tg_id))['backpack']
    if '!' in data_:
        if data_.split('!')[0] == Backpack.backpack_foliage:
            backpack = Backpack.backpack_foliage

        elif data_.split('!')[0] == Backpack.backpack_leana:
            backpack = Backpack.backpack_leana

    return backpack


# —Ñ—É–Ω–∫—Ü–∏—è –±–µ—Ä–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ wardrobe '!0!98!44!13!55' –∏ —É–±–∏—Ä–∞–µ—Ç —Ç–æ —á–∏—Å–ª–æ - (%),
# –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–æ–¥–Ω–æ —É–±–∏—Ä–∞–µ—Ç –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
async def modify_str_to_str_del_choise_percent_and_null(str_from_database: str, choise_percent: str) -> str:
    """
    —Ñ—É–Ω–∫—Ü–∏—è –±–µ—Ä–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ wardrobe '!0!98!44!13!55' –∏ —É–±–∏—Ä–∞–µ—Ç —Ç–æ —á–∏—Å–ª–æ - (%),
    –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–æ–¥–Ω–æ —É–±–∏—Ä–∞–µ—Ç –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    logging.info(f"modify_str_to_str_del_choise_percent_and_null --- str_from_database={str_from_database} --- choise_percent={choise_percent}")
    if '!' in str_from_database:
        list_:list = str_from_database.split('!')
        #logging.info(f"–í–†–ï–ú–ï–ù–ù–û 1 --- list_ = {list_}")
        if not list_[0]: # –ï—Å–ª–∏ –≤–ø–µ—Ä–µ–¥–∏ —Å—Ç–æ—è–ª ! –∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω –ø–æ—Å–ª–µ split —Å—Ç–∞–ª ["", "1"], —Ç.–µ. None
            list_.pop(0)

        #logging.info(f"–í–†–ï–ú–ï–ù–ù–û 2 --- list_ = {list_} –ü—Ä–æ–≤–µ—Ä—å. —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞?")
        list_ = [int(value) for value in list_]
        list_.sort(reverse=True)
    else:
        list_:list = []
        if str_from_database:
            list_.append(int(str_from_database))

    # –±–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è 0 –∏–∑ —Å—Ç—Ä–æ–∫–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å –µ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫—É–¥–∞-—Ç–æ –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ
    if 0 in list_:
        while 0 in list_:
            list_.remove(0)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    list_ = [str(value) for value in list_]

    if choise_percent in list_:
        logging.info(f'choise_percent = {choise_percent}  -----  list_ = {list_}')
        list_.remove(choise_percent)
    # –º–µ—Ç–æ–¥ .join –º–æ–∂–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏
    str_return = '!'.join(list_)
    logging.info(f"–í–†–ï–ú–ï–ù–ù–û 3 --- str_return = {str_return}")

    return str_return


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
# –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Wardrobe, —Ç—É—Ç –Ω–µ—Ç –∂–µ–ª—Ç—ã—Ö —è—á–µ–µ–∫
async def create_list_for_create_keyboard_with_colored_cell_without_yellow_cell(tg_id: int, prefix: str='') -> list:
    """
    –í–ù–ò–ú–ê–ù–ò–ï –ü–ï–†–ï–ü–£–¢–ê–ù–´ –ú–ï–°–¢–ê–ú–ò –Ø–ß–ï–ô–ö–ò "–¶–í–ï–¢" "–†–Æ–ö–ó–ê–ö"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏,
    –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Wardrobe, —Ç—É—Ç –Ω–µ—Ç –∂–µ–ª—Ç—ã—Ö —è—á–µ–µ–∫
    """
    logging.info(f"create_list_for_create_keyboard_with_colored_cell_without_yellow_cell")
    list_colored_button: list = []
    green = 'üü©'
    yellow = 'üü®'
    red = 'üü•'
    backpack = await what_backpack_put_on(tg_id=tg_id) # –Ω–∞ ! –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å

    if backpack == Backpack.no_backpack:
        return

    elif backpack == Backpack.backpack_foliage:
        #data_bf_cell = await rq.get_BackpackFoliage(tg_id=tg_id)
        #cell_1 = data_bf_cell['cell_1']
        #cell_2 = data_bf_cell['cell_2']

        dict_cell_1 = await rq.get_BFoliageCell_1(tg_id=tg_id)
        dict_cell_2 = await rq.get_BFoliageCell_2(tg_id=tg_id)
        logging.info(f"–í–†–ï–ú–ï–ù–ù–û 1 --- dict_cell_1 = {dict_cell_1} --- dict_cell_2 = {dict_cell_2}")

        if not dict_cell_1: # –æ–¥–∏–Ω–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:  —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—â–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π,
            list_colored_button.append([green, f"{prefix}!{'green'}!{backpack}!{'cell_1'}"])
        else:
            list_colored_button.append([red, f"{prefix}!{'red'}!{backpack}!{'cell_1'}"])

        if not dict_cell_2:
            list_colored_button.append([green, f"{prefix}!{'green'}!{backpack}!{'cell_2'}"])
        else:
            list_colored_button.append([red, f"{prefix}!{'red'}!{backpack}!{'cell_2'}"])
        logging.info(f"–í–†–ï–ú–ï–ù–ù–û 2 --- list_colored_button = {list_colored_button}")

    elif backpack == Backpack.backpack_leana:
        #data_bl_cell = await rq.get_BackpackLeana(tg_id=tg_id)
        #cell_1 = data_bl_cell['cell_1']
        #cell_2 = data_bl_cell['cell_2']
        #cell_3 = data_bl_cell['cell_3']
        #cell_4 = data_bl_cell['cell_4']

        dict_cell_1 = await rq.get_BLeanaCell_1(tg_id=tg_id)
        dict_cell_2 = await rq.get_BLeanaCell_2(tg_id=tg_id)
        dict_cell_3 = await rq.get_BLeanaCell_3(tg_id=tg_id)
        dict_cell_4 = await rq.get_BLeanaCell_4(tg_id=tg_id)
        logging.info(f"–í–†–ï–ú–ï–ù–ù–û 1 --- dict_cell_1 = {dict_cell_1} --- dict_cell_2 = {dict_cell_2} --- dict_cell_3 = {dict_cell_3} --- dict_cell_4 = {dict_cell_4}")

        if not dict_cell_1: # –¥–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏ —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—â–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π, –∏ —á–∏—Å–ª–æ –≤ —è—á–µ–π–∫–µ = 0
            list_colored_button.append([green, f"{prefix}!{'green'}!{backpack}!{'cell_1'}"])
        else:
            list_colored_button.append([red, f"{prefix}!{'red'}!{backpack}!{'cell_1'}"])

        if not dict_cell_2:
            list_colored_button.append([green, f"{prefix}!{'green'}!{backpack}!{'cell_2'}"])
        else:
            list_colored_button.append([red, f"{prefix}!{'red'}!{backpack}!{'cell_2'}"])

        if not dict_cell_3:
            list_colored_button.append([green, f"{prefix}!{'green'}!{backpack}!{'cell_3'}"])
        else:
            list_colored_button.append([red, f"{prefix}!{'red'}!{backpack}!{'cell_3'}"])

        if not dict_cell_4:
            list_colored_button.append([green, f"{prefix}!{'green'}!{backpack}!{'cell_4'}"])
        else:
            list_colored_button.append([red, f"{prefix}!{'red'}!{backpack}!{'cell_4'}"])

        logging.info(f"–í–†–ï–ú–ï–ù–ù–û 2 --- list_colored_button = {list_colored_button}")
    return list_colored_button


# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ä—é–∫–∑–∞–∫–µ
async def dict_with_all_things_from_backpack(tg_id: int, pocket: str|None=None) -> dict:
    """ # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ä—é–∫–∑–∞–∫–µ, –∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä 'pocket', —Ç–æ –∏ –≤ –∫–∞—Ä–º–∞–Ω–∞—Ö"""
    logging.info('dict_with_all_things_from_backpack')

    backpack_put_on = await what_backpack_put_on(tg_id=tg_id)
    common_dict: dict = {}

    pocket1 = await rq.get_Pocket1(tg_id=tg_id)
    pocket2 = await rq.get_Pocket2(tg_id=tg_id)

    if backpack_put_on == Backpack.backpack_foliage:
        cell1 = await rq.get_BFoliageCell_1(tg_id=tg_id)
        cell2 = await rq.get_BFoliageCell_2(tg_id=tg_id)
        cell3 = 0
        cell4 = 0


    elif backpack_put_on == Backpack.backpack_leana:
        cell1 = await rq.get_BLeanaCell_1(tg_id=tg_id)
        cell2 = await rq.get_BLeanaCell_2(tg_id=tg_id)
        cell3 = await rq.get_BLeanaCell_3(tg_id=tg_id)
        cell4 = await rq.get_BLeanaCell_4(tg_id=tg_id)


    # —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –≤–µ—â–∞–º–∏ –∏–∑ –∫–∞—Ä–º–∞–Ω–æ–≤ –∏ –≤—Å–µ—Ö —è—á–µ–µ–∫

    # —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤—ã–≤–æ–¥–∏–º—ã–π —Å–ª–æ–≤–∞—Ä—å –ü–û–ö–ï–¢–´, –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ 'pocket'
    if pocket:
        if pocket1:
            if list(pocket1.keys())[0] not in list(common_dict.keys()):
                common_dict.update(pocket1)
            else:
                key = list(pocket1.keys())[0]
                if key in LSWG: # –ï—Å–ª–∏ –≤–µ—â—å –∏–∑ –±—Ä–æ–Ω–∏ / –æ—Ä—É–∂–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ !
                    common_dict.update({key: f"{common_dict[key]}!{pocket1[key]}"})
                else: # –µ—Å–ª–∏ –≤–µ—â—å –∏–∑ —Ç—Ä—ç—à–∞
                    common_dict.update({key: common_dict[key]+pocket1[key]})

        if pocket2:
            if list(pocket2.keys())[0] not in list(common_dict.keys()):
                common_dict.update(pocket2)
            else:
                key = list(pocket2.keys())[0]
                if key in LSWG: # –ï—Å–ª–∏ –≤–µ—â—å –∏–∑ –±—Ä–æ–Ω–∏ / –æ—Ä—É–∂–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ !
                    common_dict.update({key: f"{common_dict[key]}!{pocket2[key]}"})
                else: # –µ—Å–ª–∏ –≤–µ—â—å –∏–∑ —Ç—Ä—ç—à–∞
                    common_dict.update({key: common_dict[key]+pocket2[key]})

    if cell1:
        if list(cell1.keys())[0] not in list(common_dict.keys()):
            common_dict.update(cell1)
        else:
            key = list(cell1.keys())[0]
            if key in LSWG: # –ï—Å–ª–∏ –≤–µ—â—å –∏–∑ –±—Ä–æ–Ω–∏ / –æ—Ä—É–∂–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ !
                common_dict.update({key: f"{common_dict[key]}!{cell1[key]}"})
            else: # –µ—Å–ª–∏ –≤–µ—â—å –∏–∑ —Ç—Ä—ç—à–∞
                common_dict.update({key: common_dict[key]+cell1[key]})

    if cell2:
        if list(cell2.keys())[0] not in list(common_dict.keys()):
            common_dict.update(cell2)
        else:
            key = list(cell2.keys())[0]
            if key in LSWG:
                common_dict.update({key: f"{common_dict[key]}!{cell2[key]}"})
            else: # –µ—Å–ª–∏
                common_dict.update({key: common_dict[key]+cell2[key]})

    if cell3:
        if list(cell3.keys())[0] not in list(common_dict.keys()):
            common_dict.update(cell3)
        else:
            key = list(cell3.keys())[0]
            if key in LSWG:
                common_dict.update({key: f"{common_dict[key]}!{cell3[key]}"})
            else: # –µ—Å–ª–∏
                common_dict.update({key: common_dict[key]+cell3[key]})

    if cell4:
        if list(cell4.keys())[0] not in list(common_dict.keys()):
            common_dict.update(cell4)
        else:
            key = list(cell4.keys())[0]
            if key in LSWG:
                common_dict.update({key: f"{common_dict[key]}!{cell4[key]}"})
            else: # –µ—Å–ª–∏
                common_dict.update({key: common_dict[key]+cell4[key]})

    logging.info(f'–í–†–ï–ú–ï–ù–ù–û return --- dict_with_all_things_from_backpack --- {common_dict}')
    return common_dict



# –±–µ—Ä–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–≤–µ—Ä—Ö—É –∏ –≤—ã–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–ª–∏—Ç–µ–ª–µ–º \n –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ
async def modify_dict_with_all_things_from_backpack_to_srt_with_enter(dict_: dict) -> str:
    """ –±–µ—Ä–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–≤–µ—Ä—Ö—É –∏ –≤—ã–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–ª–∏—Ç–µ–ª–µ–º \n –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ"""
    logging.info('modify_dict_with_all_things_from_backpack_to_srt_with_enter')
    str_: str = ''
    for key, value in dict_.items():
        if key in LSWG:
            if '!' in str(value):
                list_ = value.split('!')
                for thing in list_:
                    str_ = str_ + f"{All_Th[key]} {thing}%\n"
            else:
                str_ = str_ + f"{All_Th[key]} {value}%\n"
        else:
            str_ = str_ + f"{All_Th[key]} {value}—à—Ç.\n"
    return str_

# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏ –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ä—é–∫–∑–∞–∫–µ c —É–∫–∞–∑–∞–Ω–∏–µ–º –≤ –∫–∞–∫–æ–º(–π) –∫–∞—Ä–º–∞–Ω–µ\—è—á–µ–π–∫–µ –ª–µ–∂–∏—Ç —ç—Ç–∞ –≤–µ—â—å
async def create_list_with_dict_all_things_from_pocket_and_cell_backpack(tg_id: int) -> list[dict]:
    """ # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏ –≤—Å–µ–≥–æ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ä—é–∫–∑–∞–∫–µ c —É–∫–∞–∑–∞–Ω–∏–µ–º –≤ –∫–∞–∫–æ–º(–π) –∫–∞—Ä–º–∞–Ω–µ\—è—á–µ–π–∫–µ –ª–µ–∂–∏—Ç —ç—Ç–∞ –≤–µ—â—å """
    logging.info('create_list_with_dict_all_things_from_pocket_and_cell_backpack')

    backpack_put_on = await what_backpack_put_on(tg_id=tg_id)

    list_return: list[list,list,list] = [[],[],[]]

    pocket1 = await rq.get_Pocket1(tg_id=tg_id)
    if pocket1:
        list_return[0].append({'pocket1': pocket1})
        list_return[1].append(list(pocket1.keys())[0])
        list_return[2].append('pocket1')

    pocket2 = await rq.get_Pocket2(tg_id=tg_id)
    if pocket2:
        list_return[0].append({'pocket2': pocket2})
        list_return[1].append(list(pocket1.keys())[0])
        list_return[2].append('pocket2')

    if backpack_put_on == Backpack.backpack_foliage:
        cell1 = await rq.get_BFoliageCell_1(tg_id=tg_id)
        cell2 = await rq.get_BFoliageCell_2(tg_id=tg_id)
        cell3 = 0
        cell4 = 0

    elif backpack_put_on == Backpack.backpack_leana:
        cell1 = await rq.get_BLeanaCell_1(tg_id=tg_id)
        cell2 = await rq.get_BLeanaCell_2(tg_id=tg_id)
        cell3 = await rq.get_BLeanaCell_3(tg_id=tg_id)
        cell4 = await rq.get_BLeanaCell_4(tg_id=tg_id)

    if cell1:
        list_return[0].append({'cell1': cell1})
        list_return[1].append(list(cell1.keys())[0])
        list_return[2].append('cell1')
    if cell2:
        list_return[0].append({'cell2': cell2})
        list_return[1].append(list(cell2.keys())[0])
        list_return[2].append('cell2')
    if cell3:
        list_return[0].append({'cell3': cell3})
        list_return[1].append(list(cell3.keys())[0])
        list_return[2].append('cell3')
    if cell4:
        list_return[0].append({'cell4': cell4})
        list_return[1].append(list(cell4.keys())[0])
        list_return[2].append('cell4')

    logging.info(f'list_return = {list_return}')
    return list_return


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –≤–µ—Å—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ª—É—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –∫–∞—Ä–º–∞–Ω—ã –∏ —è—á–µ–π–∫–∏ –Ω–∞–¥–µ—Ç–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞, –µ—Å–ª–∏ –¥–∞, —Ç–æ —Ä–∞—Å–ø–∏—Ö–∏–≤–∞–µ—Ç –ø–æ –∫–∞—Ä–º–∞–Ω–∞–º –∏ —è—á–µ–π–∫–∞–º
async def check_all_loot_put_on_pockets_and_cells_backpack_if_yes_remove(tg_id:int, dict_loot: dict) -> bool:
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –≤–µ—Å—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ª—É—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –∫–∞—Ä–º–∞–Ω—ã –∏ —è—á–µ–π–∫–∏ –Ω–∞–¥–µ—Ç–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞, –µ—Å–ª–∏ –¥–∞, —Ç–æ —Ä–∞—Å–ø–∏—Ö–∏–≤–∞–µ—Ç –ø–æ –∫–∞—Ä–º–∞–Ω–∞–º –∏ —è—á–µ–π–∫–∞–º """
    logging.info('check_all_loot_put_on_pockets_and_cells_backpack_if_yes_remove(dict_loot: dict) -> bool:')

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫–æ–π —Ä—é–∫–∑–∞–∫ –Ω–∞–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —Ä—é–∫–∑–∞–∫–∞, —Ç–æ return false
    backpack = await what_backpack_put_on(tg_id)
    if backpack == 'no_backpack':
        return False

    #list_pocket_cell:list = await create_list_with_dict_all_things_from_pocket_and_cell_backpack(tg_id=tg_id)
    #–Ω–∞–π–¥–µ–Ω–Ω—ã–π –ª—É—Ç 'berries'= 4, 'vine_leaves'=1, 'yel_fl'=2, 'stick'=3, 'seed_zlg'=1

    # list_dict_p_c ##### list_return = [[{'pocket1': {'berries': 10}}, {'cell2': {'shoes_wanderer': 34}}, {'cell3': {'seed_zlg': 19}}],
    # ['berries', 'shoes_wanderer', 'seed_zlg'], ['pocket1', 'cell2', 'cell3']]

   # for key, value in dict_loot.items():
     #   if

#    dict_pocket_cell:dict = await dict_with_all_things_from_backpack(tg_id=tg_id, pocket='pocket')
#    list_dict_p_c = await create_list_with_dict_all_things_from_pocket_and_cell_backpack(tg_id)
#    temp_list_dict_p_c: list = []
#    list_name_pocket_cell = ['pocket1', 'pocket2', 'cell1', 'cell2', 'cell3', 'cell4']
#    count_list_name_p_c: int = 0
#    for name_p_c in list_name_pocket_cell: # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É list_name_pocket_cell = ['pocket1', 'pocket2', 'cell1', 'cell2', 'cell3', 'cell4']
#        if name_p_c in list_dict_p_c[2]: # –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –µ—Å—Ç—å –≤ list_dict_p_c = await create_list_with_dict_all_things_from_pocket_and_cell_backpack(tg_id) [2]

#            for elem in list_dict_p_c[0]: # —Ç–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ —Å –∫–ª—é—á–∞–º–∏
#                if name_p_c == list(elem.keys())[0]: # –∏—â–µ–º –µ–≥–æ –∏
#                    temp_list_dict_p_c.append(elem) # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
#        else:
#            temp_list_dict_p_c.append({list_name_pocket_cell[count_list_name_p_c]: {}})
#        count_list_name_p_c+=1

    # temp_list_dict_p_c = [{'pocket1': {}}, {'pocket2': {}}, {'cell1': {}}, {'cell2': {'shoes_wanderer': 34}}, {'cell3': {'seed_zlg': 19}}, {'cell4': {}}]
    # 1 –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –Ω–∞–ª—É—Ç–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—â–µ–π
#    flag: bool = True
#    len_dict_loot = len(dict_loot) # –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞—Ä—è —Å –ª—É—Ç–æ–º

#    for loot, value_loot in dict_loot.items(): # {'berries': 2, 'vine_leaves': 1, 'yel_fl': 3, 'stick': 3, 'seed_zlg': 1}
#        if loot not in list_dict_p_c[1]: # –µ—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü–∞ –ª—É—Ç–∞ –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ä–º–∞–Ω—ã-—è—á–µ–π–∫–∏
#            # –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —è–≥–æ–¥, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∫–∞—Ä–º–∞–Ω—ã, –¥—Ä—É–≥–æ–µ –Ω–µ—Ç
#            if loot == 'berries':
#                count_ = 0
#                for dict_elem in temp_list_dict_p_c[:]: # [{'pocket1': {}}, {'pocket2': {}}, {'cell1': {}}, {'cell2': {'shoes_wanderer': 34}},
#                    name_pc = list(dict_elem.keys())[0]
#                    if not dict_elem[name_pc]:   # –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å {'cell2': {'shoes_wanderer': 34} == False --- {'pocket2': {}} == True
#                        temp_list_dict_p_c[count_][name_pc]={loot: value_loot}
#                    else:
#                        count_+=1
#            else:
#                count_ = 0
#                for dict_elem in temp_list_dict_p_c[2:]: # [{'pocket1': {}}, {'pocket2': {}}, {'cell1': {}}, {'cell2': {'shoes_wanderer': 34}},
#                    name_pc, dict_pc = dict_elem.items()
#                    if not dict_elem[name_pc]:   # –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å {'cell2': {'shoes_wanderer': 34} == False --- {'pocket2': {}} == True
#                        temp_list_dict_p_c[count_][name_pc]={loot: value_loot}
#                    else:
#                        count_+=1
#            logging.info(f'\ndict_loot = {dict_loot}\ndict_pocket_cell = {dict_pocket_cell}\nlist_dict_p_c = {list_dict_p_c}\ntemp_list_dict_p_c = {temp_list_dict_p_c}')

#        else:  # –µ—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü–∞ –ª—É—Ç–∞ –ï–°–¢–¨ –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ä–º–∞–Ω—ã-—è—á–µ–π–∫–∏
            # –∏—â–µ–º –≤ –∫–∞–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ —ç—Ç–æ—Ç –ª—É—Ç
            #for dict_elem in temp_list_dict_p_c[:]: # [{'pocket1': {}}, {'pocket2': {}}, {'cell1': {}}, {'cell2': {'shoes_wanderer': 34}},
             #   name_pc, dict_pc = dict_elem.items()
              #  if not dict_elem[name_pc]:   # –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å {'cell2': {'shoes_wanderer': 34} == False --- {'pocket2': {}} == True
#            logging.info(f'else')








                #for elem_dict in list_dict_p_c: # [{'cell2': {'shoes_wanderer': 34}}, {'cell3': {'seed_zlg': 19}}]
                 #   pocket_cell, dict_name_value_p_c = elem_dict.items()
                  #  name_loot, value









#        logging.info(f'\ndict_loot = {dict_loot}\ndict_pocket_cell = {dict_pocket_cell}\nlist_dict_p_c = {list_dict_p_c}\ntemp_list_dict_p_c = {temp_list_dict_p_c}')
    return True
    #

    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–∞ —Å–ª–æ–≤–∞—Ä—è

#    for key, value in dict_loot.items():
#
#        if key in list(dict_pocket_cell.keys()):
#            dict_pocket_cell.update({key: dict_pocket_cell[key]+value})
#        else:
#            dict_pocket_cell.update({key: value})
#    logging.info(f'common_dict = {dict_pocket_cell}')

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –≤ –Ω–æ–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ –∫–ª—é—á–µ–π (–≤–µ—â–µ–π) —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–µ 20
#    count_value_more_20: int = 0
#    for key, value in dict_pocket_cell.items():
#        if value > 20 and key not in LSWG:
#            count_value_more_20 += 1

#    if backpack == Backpack.backpack_leana:
#        if len(dict_pocket_cell)>6 or (len(dict_pocket_cell)>5 and count_value_more_20>0) or (len(dict_pocket_cell)>4 and count_value_more_20>1) or (len(dict_pocket_cell)
#            >3 and count_value_more_20>2):
#            logging.info(f'len(dict_pocket_cell) = {len(dict_pocket_cell)}--- dict_pocket_cell={dict_pocket_cell} --- count_value_more_20 = {count_value_more_20}')
#            return False
#        else:
#            logging.info(f'–ë—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –¢–†–£ –ª–µ–∞–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫')

#    elif backpack == Backpack.backpack_foliage:
#        if len(dict_pocket_cell)>4 or (len(dict_pocket_cell)>3 and count_value_more_20>0) or (len(dict_pocket_cell)>2 and count_value_more_20>1) or (len(dict_pocket_cell)
#            >1 and count_value_more_20>2):
#            return False
#        else:
#            logging.info(f'–ë—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –¢–†–£ –ª–∏—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫')

    # —Ç—É—Ç —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–∏–¥–∫—É –≤–µ—â–µ–π –∏–∑ –æ–Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ª—É—Ç–∞ –≤ –Ω–∞–¥–µ—Ç—ã–π —Ä—é–∫–∑–∞–∫









# all_things_can_be_moved_to_a_new_backpack --- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∏–ª–∏ –µ—Å–ª–∏ –±—ã–ª –Ω–∞–¥–µ—Ç –ª–∏—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫,
# –∏–ª–∏ –≤–µ—â–∏ –∏–∑ –ª–µ–∞–Ω–Ω–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –ª–∏—Å—Ç–≤–µ–Ω–Ω—ã–π
async def all_things_can_be_moved_to_a_new_backpack(tg_id: int) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∏–ª–∏ –µ—Å–ª–∏ –±—ã–ª –Ω–∞–¥–µ—Ç –ª–∏—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫, –∏–ª–∏ –≤–µ—â–∏ –∏–∑ –ª–µ–∞–Ω–Ω–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –ª–∏—Å—Ç–≤–µ–Ω–Ω—ã–π. –ù–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç.
    """
    logging.info(f"all_things_can_be_moved_to_a_new_backpack")

    data_backpack_foliage = await rq.get_BackpackFoliage(tg_id=tg_id)
    data_backpack_leana = await rq.get_BackpackLeana(tg_id=tg_id)
    backpack_put_on = await what_backpack_put_on(tg_id=tg_id)
    logging.info(f" –í–†–ï–ú–ï–ù–ù–û --- all_things_can_be_moved_to_a_new_backpack --- backpack_put_on = {backpack_put_on}")

    if backpack_put_on == Backpack.no_backpack:
        return False
    elif backpack_put_on == Backpack.backpack_foliage:
        return True
    elif backpack_put_on == Backpack.backpack_leana:
        # –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ, –ø–æ–º—è—Å—Ç—è—Ç—Å—è –ª–∏ –≤–µ—â–∏ –≤ –ª–∏—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫
        data_bl_cell1 = await rq.get_BLeanaCell_1(tg_id=tg_id)
        data_bl_cell2 = await rq.get_BLeanaCell_2(tg_id=tg_id)
        data_bl_cell3 = await rq.get_BLeanaCell_3(tg_id=tg_id)
        data_bl_cell4 = await rq.get_BLeanaCell_4(tg_id=tg_id)
        common_dict: dict = {}

        if data_bl_cell1:
            if list(data_bl_cell1.keys())[0] not in list(common_dict.keys()):
                common_dict.update(data_bl_cell1)
            else:
                key = list(data_bl_cell1.keys())[0]
                common_dict.update({key: common_dict[key]+data_bl_cell1[key]})
        #logging.info(f" data_bl_cell1 = {data_bl_cell1} --- common_dict = {common_dict}"
         #            f"\n len(list(common_dict.keys())) = {len(list(common_dict.keys()))} --- list(common_dict.values()) = {list(common_dict.values())}")

        if data_bl_cell2:
            if list(data_bl_cell2.keys())[0] not in list(common_dict.keys()):
                common_dict.update(data_bl_cell2)
            else:
                key = list(data_bl_cell2.keys())[0]
                common_dict.update({key: common_dict[key]+data_bl_cell2[key]})
        #logging.info(f" data_bl_cell2 = {data_bl_cell2} --- common_dict = {common_dict}"
         #            f"\n len(list(common_dict.keys())) = {len(list(common_dict.keys()))} --- list(common_dict.values()) = {list(common_dict.values())}")

        if data_bl_cell3:
            if list(data_bl_cell3.keys())[0] not in list(common_dict.keys()):
                common_dict.update(data_bl_cell3)
            else:
                key = list(data_bl_cell3.keys())[0]
                common_dict.update({key: common_dict[key]+data_bl_cell3[key]})
        #logging.info(f" data_bl_cell3 = {data_bl_cell1} --- common_dict = {common_dict}"
         #            f"\n len(list(common_dict.keys())) = {len(list(common_dict.keys()))} --- list(common_dict.values()) = {list(common_dict.values())}")

        if data_bl_cell4:
            if list(data_bl_cell4.keys())[0] not in list(common_dict.keys()):
                common_dict.update(data_bl_cell4)
            else:
                key = list(data_bl_cell4.keys())[0]
                common_dict.update({key: common_dict[key]+data_bl_cell4[key]})
        #logging.info(f" data_bl_cell4 = {data_bl_cell1} --- common_dict = {common_dict}"
         #            f"\n len(list(common_dict.keys())) = {len(list(common_dict.keys()))} --- list(common_dict.values()) = {list(common_dict.values())}")
        #   –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–∏ –æ—Ç –±–æ–ª–µ–µ —á–µ–º 2 —è—á–µ–µ–∫               –∏–ª–∏ –∑–∞–Ω—è—Ç—ã –¥–≤–µ —è—á–µ–π–∫–∏, –Ω–æ –≤ –ª—é–±–æ–π –∏–∑ –Ω–µ–π –±–æ–ª—å—à–µ 21                                                        –∏–ª–∏ –µ—Å–ª–∏ –æ–¥–Ω–∞ —è—á–µ–π–∫–∞, –Ω–æ –±–æ–ª–µ–µ 40 –≤–µ—â–µ–π
        if len(list(common_dict.keys()))>2 or (len(list(common_dict.keys()))==2 and (list(common_dict.values())[0]>20 or list(common_dict.values())[1]>=20)) or (len(list(common_dict.keys()))==1 and list(common_dict.values())[0]>40):
            return False
        return True


# –≤ –Ω–∞–¥–µ—Ç–æ–º —Ä—é–∫–∑–∞–∫–µ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–µ—â–∏ –∏–∑ –≤—Å–µ—Ö —è—á–µ–µ–∫
async def delete_all_things_from_put_on_backpack(tg_id: int, pocket: str|None=None, del_backpack_xp: str|None=None) -> None:
    """–≤ –Ω–∞–¥–µ—Ç–æ–º —Ä—é–∫–∑–∞–∫–µ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–µ—â–∏ –∏–∑ –≤—Å–µ—Ö —è—á–µ–µ–∫, –∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä 'pocket', —Ç–æ –∏ –≤ —è—á–µ–π–∫–∞—Ö,
    –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä 'del_backpack_xp' —Ç–æ —É–¥–∞–ª–∏—Ç—Å—è —Ä—é–∫–∑–∞–∫ –∏ –µ–≥–æ —Ö–ø –≤ —Ç–∞–±–ª–∏—Ü–µ user"""
    logging.info('delete_all_things_from_put_on_backpack')

    if pocket:
        pocket1 = await rq.get_Pocket1(tg_id)
        if pocket1:
            await rq.set_pocket1(tg_id, list(pocket1.keys())[0], 0)
        pocket2 = await rq.get_Pocket2(tg_id)
        if pocket2:
            await rq.set_pocket2(tg_id, list(pocket2.keys())[0], 0)

    backpack_put_on = await what_backpack_put_on(tg_id=tg_id)
    if backpack_put_on == Backpack.backpack_foliage:
        cell1 = await rq.get_BFoliageCell_1(tg_id=tg_id)
        if cell1:
            await rq.set_b_foliage_cell_1(tg_id=tg_id, name_column=list(cell1.keys())[0], current_value=0)
        cell2 = await rq.get_BFoliageCell_2(tg_id=tg_id)
        if cell2:
            await rq.set_b_foliage_cell_2(tg_id=tg_id, name_column=list(cell2.keys())[0], current_value=0)
    elif backpack_put_on == Backpack.backpack_leana:
        cell1 = await rq.get_BLeanaCell_1(tg_id=tg_id)
        if cell1:
            await rq.set_b_leana_cell_1(tg_id=tg_id, name_column=list(cell1.keys())[0], current_value=0)
        cell2 = await rq.get_BLeanaCell_2(tg_id=tg_id)
        if cell2:
            await rq.set_b_leana_cell_2(tg_id=tg_id, name_column=list(cell2.keys())[0], current_value=0)
        cell3 = await rq.get_BLeanaCell_3(tg_id=tg_id)
        #logging.info(f'\ncell3 = {cell3}')
        if cell3:
            await rq.set_b_leana_cell_3(tg_id=tg_id, name_column=list(cell3.keys())[0], current_value=0)
        cell4 = await rq.get_BLeanaCell_4(tg_id=tg_id)
        if cell4:
            await rq.set_b_leana_cell_4(tg_id=tg_id, name_column=list(cell4.keys())[0], current_value=0)
    if del_backpack_xp:
        await rq.set_user(tg_id, "backpack", "no_backpack")
        await rq.set_user(tg_id, "xp_backpack", 0)



# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ö—Ä –ù–ê–î–ï–¢–û–ì–û —Ä—é–∫–∑–∞–∫–∞ –±–æ–ª—å—à–µ 0
async def check_xp_put_on_backpack_if_more_then_zero (tg_id: int) -> bool:
    """ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ö—Ä –ù–ê–î–ï–¢–û–ì–û —Ä—é–∫–∑–∞–∫–∞ –±–æ–ª—å—à–µ 0 """
    logging.info(f'check_xp_put_on_backpack_if_more_then_zero')

    backpack = await what_backpack_put_on(tg_id=tg_id) # –∫–∞–∫–æ–π —Ä—é–∫–∑–∞–∫ –Ω–∞–¥–µ—Ç?
    #if '!' in data_backpack:
    #    backpack = data_backpack.split('!')[0] # –≤ User[backpack] –∑–∞–ø–∏—Å—å: 'no_backpack' –∏–ª–∏ 'backpack_foliage!100'
    #else:
    #    backpack = data_backpack

    if backpack == Backpack.no_backpack:
        return False
    else:
        xp = (await rq.get_user_dict(tg_id=tg_id))['xp_backpack']
        logging.info(f'–•–ü –†–Æ–ö–ó–ê–ö–ê –†–ê–í–ù–û = {xp}')

    if xp > 0:
        return True
    return False



# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤–µ—â–∏ –∏–∑ —Ä—é–∫–∑–∞–∫–∞ –º–æ–≥—É—Ç –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –∫–∞—Ä–º–∞–Ω—ã. –ï—Å–ª–∏ True - –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –∫–∞—Ä–º–∞–Ω—ã, –µ—Å–ª–∏ False - –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –•—Ä–∞–Ω–∏–ª–∏—â–∞
async def all_things_can_be_moved_from_backpack_with_zero_xp_to_pocket(tg_id: int, clb: CallbackQuery | None=None) -> bool:
    """ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤–µ—â–∏ –∏–∑ —Ä—é–∫–∑–∞–∫–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∫–∞—Ä–º–∞–Ω—ã. –ï—Å–ª–∏ True - –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –∫–∞—Ä–º–∞–Ω—ã, –µ—Å–ª–∏ False (—Ç—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ—Å—Ç–æ –ª–æ–∫–∞—Ü–∏–∏)- –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –•—Ä–∞–Ω–∏–ª–∏—â–∞"""

    logging.info('all_things_can_be_moved_from_backpack_with_zero_xp_to_pocket')

    backpack_put_on = await what_backpack_put_on(tg_id=tg_id)
    pocket1 = await rq.get_Pocket1(tg_id=tg_id)
    pocket2 = await rq.get_Pocket2(tg_id=tg_id)
    common_dict: dict = {}

    if backpack_put_on == Backpack.backpack_foliage:
        cell1 = await rq.get_BFoliageCell_1(tg_id=tg_id)
        cell2 = await rq.get_BFoliageCell_2(tg_id=tg_id)
        cell3 = ''
        cell4 =''

    elif backpack_put_on == Backpack.backpack_leana:
        cell1 = await rq.get_BLeanaCell_1(tg_id=tg_id)
        cell2 = await rq.get_BLeanaCell_2(tg_id=tg_id)
        cell3 = await rq.get_BLeanaCell_3(tg_id=tg_id)
        cell4 = await rq.get_BLeanaCell_4(tg_id=tg_id)
        common_dict: dict = {}
        dict_from_cell: dict = {}

    return_False = False
    if (cell1 and list(cell1.keys())[0] in LSWGC) or (cell2 and list(cell2.keys())[0] in LSWGC) or (cell3 and list(cell3.keys())[0] #LSWGC = list_storage_wardrobe_and_gun_and_craft
        in LSWGC) or (cell4 and list(cell4.keys())[0] in LSWGC): # –µ—Å–ª–∏ –≤ —è—á–µ–π–∫–µ —Ä—é–∫–∑–∞–∫–∞ –µ—Å—Ç—å –∏–ª–∏ –±—Ä–æ–Ω—è. –∏–ª–∏ –æ—Ä—É–∂–∏–µ, —Ç–æ –≤ –∫–∞—Ä–º–∞–Ω –Ω–µ –ø–æ–π–¥–µ—Ç
        logging.info('–í–†–ï–ú–ï–ù–ù–û 1--- all_things_can_be_moved_from_backpack_with_zero_xp_to_pocket')
        return_False = True #–¥–∞–ª—å—à–µ —è –ø—Ä–æ–≤–µ—Ä—é —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ï—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç.–µ. True, —Ç–æ –∑–Ω–∞—á–∏—Ç —è —Å—é–¥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è, –≤–µ—â–∏ –∏–ª–∏ –æ—Ä—É–∂–∏–µ –µ—Å—Ç—å.
        # –í–°–Ø –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç False -> –∏ –µ—Å–ª–∏ location == landing_place => –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –≤ –•—Ä–∞–Ω–∏–ª–∏—â–∞
        # –∞ –µ—Å–ª–∏ return_False –æ—Å—Ç–∞–ª–≤—Å—å False, —Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –Ω–µ—Ç –≤–µ—â–µ–π –∏–∑ Wardrobe –∏–ª–∏ Gun

    # —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –≤–µ—â–∞–º–∏ –∏–∑ –∫–∞—Ä–º–∞–Ω–æ–≤ –∏ –≤—Å–µ—Ö —è—á–µ–µ–∫
    if cell1:
        if list(cell1.keys())[0] not in list(common_dict.keys()):
            common_dict.update(cell1)
        else:
            key = list(cell1.keys())[0]
            if key in LSWG: # –ï—Å–ª–∏ –≤–µ—â—å –∏–∑ –±—Ä–æ–Ω–∏ / –æ—Ä—É–∂–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ !
                common_dict.update({key: f"{common_dict[key]}!{cell1[key]}"})
            else: # –µ—Å–ª–∏ –≤–µ—â—å –∏–∑ —Ç—Ä—ç—à–∞
                common_dict.update({key: common_dict[key]+cell1[key]})
        logging.info(f'if cell1 --- common_dict = {common_dict}')

    if cell2:
        if list(cell2.keys())[0] not in list(common_dict.keys()):
            common_dict.update(cell2)
        else:
            key = list(cell2.keys())[0]
            if key in LSWG: # –ï—Å–ª–∏ –≤–µ—â—å –∏–∑ –±—Ä–æ–Ω–∏ / –æ—Ä—É–∂–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ !
                common_dict.update({key: f"{common_dict[key]}!{cell2[key]}"})
            else: # –µ—Å–ª–∏ –≤–µ—â—å –∏–∑ —Ç—Ä—ç—à–∞
                common_dict.update({key: common_dict[key]+cell2[key]})
        logging.info(f'if cell2 --- common_dict = {common_dict}')

    if cell3:
        if list(cell3.keys())[0] not in list(common_dict.keys()):
            common_dict.update(cell3)
        else:
            key = list(cell3.keys())[0]
            if key in LSWG: # –ï—Å–ª–∏ –≤–µ—â—å –∏–∑ –±—Ä–æ–Ω–∏ / –æ—Ä—É–∂–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ !
                common_dict.update({key: f"{common_dict[key]}!{cell3[key]}"})
            else: # –µ—Å–ª–∏ –≤–µ—â—å –∏–∑ —Ç—Ä—ç—à–∞
                common_dict.update({key: common_dict[key]+cell3[key]})
        logging.info(f'if cell3 --- common_dict = {common_dict}')

    if cell4:
        if list(cell4.keys())[0] not in list(common_dict.keys()):
            common_dict.update(cell4)
        else:
            key = list(cell4.keys())[0]
            if key in LSWG: # –ï—Å–ª–∏ –≤–µ—â—å –∏–∑ –±—Ä–æ–Ω–∏ / –æ—Ä—É–∂–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ !
                common_dict.update({key: f"{common_dict[key]}!{cell4[key]}"})
            else: # –µ—Å–ª–∏ –≤–µ—â—å –∏–∑ —Ç—Ä—ç—à–∞
                common_dict.update({key: common_dict[key]+cell4[key]})
        logging.info(f'if cell4 --- common_dict = {common_dict}')

    dict_from_cell = common_dict.copy()

    if pocket1:
        if list(pocket1.keys())[0] not in list(common_dict.keys()):
            common_dict.update(pocket1)
        else:
            key = list(pocket1.keys())[0]
            common_dict.update({key: common_dict[key]+pocket1[key]})

    if pocket2:
        if list(pocket2.keys())[0] not in list(common_dict.keys()):
            common_dict.update(pocket2)
        else:
            key = list(pocket2.keys())[0]
            common_dict.update({key: common_dict[key]+pocket2[key]})
    logging.info(f"–í–†–ï–ú–ï–ù–ù–û –°–õ–û–í–ê–†–¨ == common_dict = {common_dict}")

    # —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–º—É —Ä–∞–≤–Ω–æ return_False. –ï—Å–ª–∏ True? —Ç–æ –µ—Å—Ç—å –±—Ä–æ–Ω—è / –æ—Ä—É–∂–∏–µ
    # –ï–°–õ–ò –ù–ï –ú–û–ñ–ï–¢ –í–ú–ï–°–¢–ò–¢–¨–°–Ø –í –ö–ê–†–ú–ê–ù–´
    if return_False or len(list(common_dict.keys()))>2 or (len(list(common_dict.keys()))==2 and (list(common_dict.values())[0]>20 or list(common_dict.values())[1]>=20)) or (len(list(common_dict.keys()))==1 and list(common_dict.values())[0]>40):
        logging.info('–í–†–ï–ú–ï–ù–ù–û 2 ---- –ï–°–õ–ò –ù–ï –ú–û–ñ–ï–¢ –í–ú–ï–°–¢–ò–¢–¨–°–Ø –í –ö–ê–†–ú–ê–ù–´ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–º—É —Ä–∞–≤–Ω–æ return_False. –ï—Å–ª–∏ True? —Ç–æ –µ—Å—Ç—å –±—Ä–æ–Ω—è / –æ—Ä—É–∂–∏–µ')

        #  –í –¢–ó –≤ —à–∫–∞—Ñ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ '–ú–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏'
        # –ï—Å–ª–∏ –î–ê, —Ç–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —à–∫–∞—Ñ—ã
        data_user = await rq.get_user_dict(tg_id=tg_id)
        if data_user['location'] == 'landing_place':

            # –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å–ª–æ–≤–∞—Ä—é –∏–∑ –≤—Å–µ—Ö —è—á–µ–µ–∫ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —à–∫–∞—Ñ–∞–º
            for key, value in dict_from_cell.items():
                if key in LST:
                    value_in_starage = (await rq.get_StorageTrash(tg_id=tg_id))[key]
                    await rq.set_storage_trash(tg_id=tg_id, name_column=key, current_value=value_in_starage+value)
                elif key in LSW:
                    value_in_starage = (await rq.get_StorageWardrobe(tg_id=tg_id))[key]
                    if value_in_starage:
                        await rq.set_storage_wardrobe(tg_id=tg_id, name_column=key, current_value=f"{value_in_starage}!{value}")
                    else:
                        await rq.set_storage_wardrobe(tg_id=tg_id, name_column=key, current_value=str(value))
                elif key in LSG:
                    value_in_starage = (await rq.get_StorageGun(tg_id=tg_id))[key]
                    if value_in_starage:
                        await rq.set_storage_gun(tg_id=tg_id, name_column=key, current_value=f"{value_in_starage}!{value}")
                    else:
                        await rq.set_storage_gun(tg_id=tg_id, name_column=key, current_value=str(value))

            logging.info(f'–í–†–ï–ú–ï–ù–ù–û 3 --- common_dict = {common_dict} --- dict_from_cell = {dict_from_cell}')

            return False

        else: # –õ–æ–∫–∞—Ü–∏—è –ù–ï '–ú–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏' –£–î–ê–õ–ò–¢–¨ –í–°–ï –í–ï–©–ò –ò–ó –†–Æ–ö–ó–ê–ö–ê –ò –£–î–ê–õ–ò–¢–¨ –†–Æ–ö–ó–ê–ö
            await delete_all_things_from_put_on_backpack(tg_id=tg_id, del_backpack_xp='del_backpack_xp')
            return False
        ### –ñ–î–£ –æ—Ç–≤–µ—Ç–∞
        #else:
         #   await clb.message.edit_media(media=InputMediaPhoto(media=ph['N17']))
          #  await clb.message.edit_caption(
           # caption=f'–Ω–µ –≤–º–µ—Å—Ç–∏–ª–æ–≤—å –≤ –Ω–æ–≤—ã–π —Ä—é–∫–∑–∞–∫',
            #reply_markup=keyboard)


    logging.info('–í–†–ï–ú–ï–ù–ù–û 4 --- –ï—Å–ª–∏ —è –ø—Ä–∏—à–µ–ª —Å—é–¥–∞, —Ç–æ –≤ –∫–∞—Ä–º–∞–Ω—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ä—é–∫–∑–∞–∫–µ –ó–Ω–∞—á–∏—Ç, –¥–µ–ª–∞—é —ç—Ç–æ—Ç –ø–µ—Ä–µ–Ω–æ—Å')

    # –ï—Å–ª–∏ —è –ø—Ä–∏—à–µ–ª —Å—é–¥–∞, —Ç–æ –≤ –∫–∞—Ä–º–∞–Ω—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ä—é–∫–∑–∞–∫–µ
    # –ó–Ω–∞—á–∏—Ç, –¥–µ–ª–∞—é —ç—Ç–æ—Ç –ø–µ—Ä–µ–Ω–æ—Å
    logging.info(f'–í–†–ï–ú–ï–ù–ù–û 5 --- common_dict = {common_dict} --- dict_from_cell = {dict_from_cell}')

    # –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–Ω—É–ª—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –≤ Pocket, –∞ —Ä—é–∫–∑–∞–∫ –∏ —Ç–∞–∫ —É–¥–æ–ª–∏—Ç—å—Å—è
    await delete_all_things_from_put_on_backpack(tg_id=tg_id, pocket='pocket')
    if len(common_dict) == 2: # –µ—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–≤–∞ –∫–ª—é—á–∞, —Ç–æ –ø–µ—Ä–≤—ã–π –≤ –∫–∞—Ä–º–∞–Ω 1, –≤—Ç–æ—Ä–æ–π –≤ –∫—Ä–º–∞–Ω 2
        key1 = list(common_dict.keys())[0]
        key2 = list(common_dict.keys())[1]
        await rq.set_pocket1(tg_id=tg_id, name_column=key1, current_value=common_dict[key1])
        await rq.set_pocket2(tg_id=tg_id, name_column=key2, current_value=common_dict[key2])
    elif len(common_dict) == 1: # –µ—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –æ–¥–∏–Ω –∫–ª—é—á, –∏ –µ—Å–ª–∏ <= 20, —Ç–æ –≤ 1 –∫–∞—Ä–º–∞–Ω, –µ—Å–ª–∏ > 20? —Ç–æ —Å–ø–µ—Ä–≤–∞ 20 –≤ –∫–∞—Ä–º–∞–Ω 1, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –∫–∞—Ä–º–∞–Ω 2
        key = list(common_dict.keys())[0]
        if common_dict[key] <=20:
            await rq.set_pocket1(tg_id=tg_id, name_column=key, current_value=common_dict[key])
        else:
            await rq.set_pocket1(tg_id=tg_id, name_column=key, current_value=20)
            await rq.set_pocket2(tg_id=tg_id, name_column=key, current_value=common_dict[key]-20)


    return True



# –µ—Å–ª–∏ –•–ü —Ä—é–∫–∑–∞–∫–∞ = 0, —Ç–æ –∑–∞–ø—É—Å–∫–∞—é —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
async def xp_backpack_is_over_remove_things_delate_backpack(clb: CallbackQuery, tg_id: str, backpack: str) -> None:
    """ –µ—Å–ª–∏ –•–ü —Ä—é–∫–∑–∞–∫–∞ = 0, —Ç–æ –∑–∞–ø—É—Å–∫–∞—é —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é"""
    logging.info('xp_backpack_is_over_remove_things_delate_backpack')
    keyboard = kb.create_in_kb(1, **{'ok': 'backpack'})

    # –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: –í–°–Å –º–æ–∂–µ—Ç –≤–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –ø—É—Å—Ç—ã–µ –∫–∞—Ä–º–∞–Ω—ã?

    # –µ—Å–ª–∏ –º–æ–∂–µ—Ç –≤–º–µ—Å—Ç–∏—Ç—å—Å—è, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–∞—Ä–º–∞–Ω—ã
    # –ù–û, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é, –∏ –µ—Å–ª–∏ "–ú–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏", —Ç–æ –ø–µ—Ä–µ–Ω–æ—Å –≤ –•—Ä–∞–Ω–∏–ª–∏—â–∞
    if await all_things_can_be_moved_from_backpack_with_zero_xp_to_pocket(tg_id=tg_id):
        logging.info('xp_backpack_is_over_remove_things_delate_backpack --- if all_things_can_be_moved_from_backpack_with_zero_xp_to_pocket(tg_id=tg_id):')

        await clb.message.edit_media(media=InputMediaPhoto(media=ph['N17']))
        await clb.message.edit_caption(caption=f"{LSW[backpack]} —Å–ª–æ–º–∞–ª—Å—è. \n –í—Å—ë –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –∫–∞—Ä–º–∞–Ω—ã", reply_markup=keyboard)

        # –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ —Ä—é–∫–∑–∞–∫–∞ –≤ –∫–∞—Ä–º–∞–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏ all_things_can_be_moved_from_backpack_with_zero_xp_to_pocket
        await delete_all_things_from_put_on_backpack(tg_id=tg_id)
        await rq.set_user(tg_id=tg_id, name_column='backpack', current_value='no_backpack')# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ User no_backpack
        await clb.answer()
    else: # –ù–ï –º–æ–∂–µ—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –∫–∞—Ä–º–∞–Ω—ã. –ï—Å–ª–∏ landing_place, —Ç–æ –ø–µ—Ä–µ–Ω–æ—Å –≤ –•—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –¥—Ä—É–≥–∞—è –ª–æ–∫–∞—Ü–∏—è, —Ç–æ ### –°–î–ï–õ–ê–ô –ù–û–í–´–ô –ë–õ–û–ö (–∫–∞–∫ –∏ –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞)
        # –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ —Ä—é–∫–∑–∞–∫–∞ –≤ –•–†–ê–ù–ò–õ–ò–©–ê —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏ all_things_can_be_moved_from_backpack_with_zero_xp_to_pocket

        logging.info('xp_backpack_is_over_remove_things_delate_backpack --- ELSE --- NOT all_things_can_be_moved_from_backpack_with_zero_xp_to_pocket(tg_id=tg_id):')
        location = (await rq.get_user_dict(tg_id=tg_id))['location']
        if location == Location.landing_place:
            logging.info('xp_backpack_is_over_remove_things_delate_backpack --- ELSE --- NOT all_things_can_be.....  if location == Location.landing_place:')

            dict_with_all_things_in_ = await dict_with_all_things_from_backpack(tg_id=tg_id)
            logging.info(f'xp_backpack_is_over_remove_things_delate_backpack --- ELSE --- NOT all_things_can_be..... dict_with_all_things_in_backpack = {dict_with_all_things_in_}')

            str_to_capture = await modify_dict_with_all_things_from_backpack_to_srt_with_enter(dict_=dict_with_all_things_in_)
            logging.info(f'xp_backpack_is_over_remove_things_delate_backpack --- ELSE --- NOT all_things_can_be..... str_to_capture = {str_to_capture}')

            await delete_all_things_from_put_on_backpack(tg_id=tg_id, del_backpack_xp='del_backpack_xp')
            await rq.set_user(tg_id=tg_id, name_column='backpack', current_value='no_backpack')# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ User no_backpack
            await clb.message.edit_media(media=InputMediaPhoto(media=ph['N38']))
            await clb.message.edit_caption(caption=f"{LSW[backpack]} —Å–ª–æ–º–∞–ª—Å—è \n–∏ –±—ã–ª–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –•—Ä–∞–Ω–∏–ª–∏—â–µ:\n{str_to_capture}"
                                                   , reply_markup=keyboard)

            await clb.answer()
        else:
            await clb.message.edit_media(media=InputMediaPhoto(media=ph['N17']))
            await clb.message.edit_caption(caption=f"{LSW[backpack]} —Å–ª–æ–º–∞–ª—Å—è \n–≤–µ—â–∏ –≤—ã–±—Ä–æ—à–µ–Ω—ã."
                                                   , reply_markup=keyboard)


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
# –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Ä—é–∫–∑–∞–∫–∞ —Å –ª—é–±—ã–º–∏ –•—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏. –ï–°–¢–¨ –∂–µ–ª—Ç—ã–µ —è—á–µ–π–∫–∏.
async def create_list_for_create_keyboard_to_backpack_with_colored_cell_with_yellow_cell(
        tg_id: int,
        value_pocket_cell: int,
        #value_storage: int,
        prefix: str = 'X',

        backpack: str = 'X' ,
        clb_pocket_cell: str = 'X' ,
        clb_name: str = 'X' ,
        clb_back: str = 'X',) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏,
    –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Ä—é–∫–∑–∞–∫–∞ —Å –ª—é–±—ã–º–∏ –•—Ä–∞–Ω–∏–ª–∏—â–∞–º–∏. –ï–°–¢–¨ –∂–µ–ª—Ç—ã–µ —è—á–µ–π–∫–∏.
    """
    logging.info(f"create_list_for_create_keyboard_to_backpack_with_colored_cell_with_yellow_cell")
    list_pocket: list = []
    list_cell: list = []
    green = 'üü©'
    yellow = 'üü®'
    red = 'üü•'
    #backpack = await what_backpack_put_on(tg_id=tg_id) # –Ω–∞ ! –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å

    dict_pocket1 = await rq.get_Pocket1(tg_id=tg_id)
    dict_pocket2 = await rq.get_Pocket2(tg_id=tg_id)
    logging.info(f'dict_pocket1 = {dict_pocket1} --- dict_pocket2 = {dict_pocket2}')

                                        #list_storage_trash_drag as lstd,
    if not dict_pocket1 and clb_name in lstd: # –æ–¥–∏–Ω–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—â–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π
            list_pocket.append([green, f"{prefix}!{clb_name}!{backpack}!{'g'}!{clb_pocket_cell}!{value_pocket_cell}!{'pocket1'}"])
    elif dict_pocket1 and clb_name in lstd and clb_name in dict_pocket1 and dict_pocket1[clb_name]<20 and clb_pocket_cell != 'pocket1':
            list_pocket.append([yellow, f"{prefix}!{clb_name}!{backpack}!{'y'}!{clb_pocket_cell}!{value_pocket_cell}!{'pocket1'}"])
    else:
            list_pocket.append([red, f"{prefix}!{clb_name}!{backpack}!{'r'}!{clb_pocket_cell}!{value_pocket_cell}!{'pocket1'}"])

    if not dict_pocket2 and clb_name in lstd: # –æ–¥–∏–Ω–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—â–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π
            list_pocket.append([green, f"{prefix}!{clb_name}!{backpack}!{'g'}!{clb_pocket_cell}!{value_pocket_cell}!{'pocket2'}"])
    elif dict_pocket2 and clb_name in lstd and clb_name in dict_pocket2 and dict_pocket2[clb_name]<20 and clb_pocket_cell != 'pocket2':
            list_pocket.append([yellow, f"{prefix}!{clb_name}!{backpack}!{'y'}!{clb_pocket_cell}!{value_pocket_cell}!{'pocket2'}"])
    else:
            list_pocket.append([red, f"{prefix}!{clb_name}!{backpack}!{'r'}!{clb_pocket_cell}!{value_pocket_cell}!{'pocket2'}"])


    if backpack == Backpack.no_backpack: # –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ—å–ª–∫–æ —Å –∫–∞—Ä–º–∞–Ω–∞–º–∏
        logging.info(f"–í–†–ï–ú–ï–ù–ù–û 911 --- list_pocket = {list_pocket}")
        return list_pocket

    elif backpack == Backpack.backpack_foliage:

        dict_cell_1 = await rq.get_BFoliageCell_1(tg_id=tg_id)
        dict_cell_2 = await rq.get_BFoliageCell_2(tg_id=tg_id)
        logging.info(f"–í–†–ï–ú–ï–ù–ù–û 918 --- dict_cell_1 = {dict_cell_1} --- dict_cell_2 = {dict_cell_2}")

        if not dict_cell_1: # –æ–¥–∏–Ω–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—â–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π
            list_cell.append([green, f"{prefix}!{clb_name}!{backpack}!{'g'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_1'}"])
        # —Å–ª–æ–≤–∞—Ä—å –Ω–µ –ø—É—Å—Ç–æ–π, –≤–µ—â—å –≤ –Ω–æ–≤–æ–π —è—á–µ–π–∫–µ, –∫—É–¥–∞ —Ö–æ—Ç—è—Ç –ø–æ–ª–æ–∂–∏—Ç—å —Ç–∞–∫–∞—è –∂–µ, —ç—Ç–æ–π –≤–µ—â–∏ –Ω–µ –±–æ–ª–µ–µ 20 —à—Ç—É–∫ –∏ —ç—Ç–æ –Ω–µ "—Å–≤–æ—è –∂–µ" —è—á–µ–π–∫–∞
        elif dict_cell_1 and clb_name in dict_cell_1 and list(dict_cell_1)[0] not in LSWG and dict_cell_1[clb_name]<20 and clb_pocket_cell != 'cell_1':
            list_cell.append([yellow, f"{prefix}!{clb_name}!{backpack}!{'y'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_1'}"])
        else:
            list_cell.append([red, f"{prefix}!{clb_name}!{backpack}!{'r'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_1'}"])

        if not dict_cell_2:
            list_cell.append([green, f"{prefix}!{clb_name}!{backpack}!{'g'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_2'}"])
        elif dict_cell_2 and clb_name in dict_cell_2 and list(dict_cell_2)[0] not in LSWG and dict_cell_2[clb_name]<20 and clb_pocket_cell != 'cell_2':
            list_cell.append([yellow, f"{prefix}!{clb_name}!{backpack}!{'y'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_2'}"])
        else:
            list_cell.append([red, f"{prefix}!{backpack}!{'r'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_2'}"])


    elif backpack == Backpack.backpack_leana:

        dict_cell_1 = await rq.get_BLeanaCell_1(tg_id=tg_id)
        dict_cell_2 = await rq.get_BLeanaCell_2(tg_id=tg_id)
        dict_cell_3 = await rq.get_BLeanaCell_3(tg_id=tg_id)
        dict_cell_4 = await rq.get_BLeanaCell_4(tg_id=tg_id)


        if not dict_cell_1: # –æ–¥–∏–Ω–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—â–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π
            list_cell.append([green, f"{prefix}!{clb_name}!{backpack}!{'g'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_1'}"])
        elif dict_cell_1 and clb_name in dict_cell_1 and list(dict_cell_1)[0] not in LSWG and (list(dict_cell_1)[0] not in LSWG and dict_cell_1[clb_name]<20) and clb_pocket_cell != 'cell_1':
            list_cell.append([yellow, f"{prefix}!{clb_name}!{backpack}!{'y'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_1'}"])
        else:
            list_cell.append([red, f"{prefix}!{clb_name}!{backpack}!{'r'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_1'}"])

        if not dict_cell_2:
            list_cell.append([green, f"{prefix}!{clb_name}!{backpack}!{'g'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_2'}"])
        elif dict_cell_2 and clb_name in dict_cell_2 and list(dict_cell_2)[0] not in LSWG and (list(dict_cell_2)[0] not in LSWG and dict_cell_2[clb_name]<20) and clb_pocket_cell != 'cell_2':
            list_cell.append([yellow, f"{prefix}!{clb_name}!{backpack}!{'y'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_2'}"])
        else:
            list_cell.append([red, f"{prefix}!{backpack}!{'r'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_2'}"])

        if not dict_cell_3:
            list_cell.append([green, f"{prefix}!{clb_name}!{backpack}!{'g'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_3'}"])
        elif dict_cell_3 and clb_name in dict_cell_3 and list(dict_cell_3)[0] not in LSWG and (list(dict_cell_3)[0] not in LSWG and dict_cell_3[clb_name]<20) and clb_pocket_cell != 'cell_3':
            list_cell.append([yellow, f"{prefix}!{clb_name}!{backpack}!{'y'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_3'}"])
        else:
            list_cell.append([red, f"{prefix}!{clb_name}!{backpack}!{'r'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_3'}"])

        if not dict_cell_4:
            list_cell.append([green, f"{prefix}!{clb_name}!{backpack}!{'g'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_4'}"])
        elif dict_cell_4 and clb_name in dict_cell_4 and list(dict_cell_4)[0] not in LSWG and (list(dict_cell_4)[0] not in LSWG and dict_cell_4[clb_name]<20) and clb_pocket_cell != 'cell_4':
            list_cell.append([yellow, f"{prefix}!{clb_name}!{backpack}!{'y'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_4'}"])
        else:
            list_cell.append([red, f"{prefix}!{clb_name}!{backpack}!{'r'}!{clb_pocket_cell}!{value_pocket_cell}!{'cell_4'}"])

        logging.info(f"–í–†–ï–ú–ï–ù–ù–û 972 --- list_pocket = {list_pocket} --- list_cell = {list_cell}")
    logging.info(f"–í–†–ï–ú–ï–ù–ù–û 973 –ø–µ—Ä–µ–¥ return --- list_pocket = {list_pocket} --- list_cell = {list_cell}")
    return (list_pocket, list_cell)



# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –Ω—É–∂–Ω–æ–≥–æ —è—á–µ–π–∫–∏ / –∫–∞—Ä–º–∞–Ω–∞ –Ω—É–∂–Ω–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞
async def set_value_in_pocket_cell_put_on_backpack(
        tg_id:int,
        pocket_cell: str,
        clb_name:str,
        value: int,
        backpack: str|None=None,
) -> None:
    """—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –Ω—É–∂–Ω–æ–≥–æ —è—á–µ–π–∫–∏ / –∫–∞—Ä–º–∞–Ω–∞ –Ω—É–∂–Ω–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞"""

    logging.info('set_value_in_pocket_cell_put_on_backpack')

    if pocket_cell == 'pocket1':
            await rq.set_pocket1(tg_id=tg_id, name_column=clb_name, current_value=value)
    elif pocket_cell == 'pocket2':
        await rq.set_pocket2(tg_id=tg_id, name_column=clb_name, current_value=value)

    if backpack == Backpack.backpack_foliage and pocket_cell.startswith('cell'): # —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–æ —Å—é–¥–∞, –µ—Å–ª–∏ –≤ –∫–∞—Ä–º–∞–Ω—ã –∑–∞—à–ª–æ
        if pocket_cell == 'cell_1':
            await rq.set_b_foliage_cell_1(tg_id=tg_id, name_column=clb_name, current_value=value)
        elif pocket_cell == 'cell_2':
            await rq.set_b_foliage_cell_2(tg_id=tg_id, name_column=clb_name, current_value=value)

    elif backpack == Backpack.backpack_leana and pocket_cell.startswith('cell'): # —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–æ —Å—é–¥–∞, –µ—Å–ª–∏ –≤ –∫–∞—Ä–º–∞–Ω—ã –∑–∞—à–ª–æ
        if pocket_cell == 'cell_1':
            await rq.set_b_leana_cell_1(tg_id=tg_id, name_column=clb_name, current_value=value)
        elif pocket_cell == 'cell_2':
            await rq.set_b_leana_cell_2(tg_id=tg_id, name_column=clb_name, current_value=value)
        elif pocket_cell == 'cell_3':
            await rq.set_b_leana_cell_3(tg_id=tg_id, name_column=clb_name, current_value=value)
        elif pocket_cell == 'cell_4':
            await rq.set_b_leana_cell_4(tg_id=tg_id, name_column=clb_name, current_value=value)


# –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤–µ—â–∏ –∏–∑ –∫–∞—Ä–º–∞–Ω–æ–≤ –∏ —Ä—é–∫–∑–∞–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
# –ò –ú–û–ñ–ï–¢ –ë–´–¢–¨ –û–ë–†–ê–¢–ù–û
# –ò –ú–û–ñ–ï–¢ –ë–´–¢–¨ –£–î–ê–õ–Ø–ï–¢, –î–û–ö–õ–ê–î–´–í–ê–ï–¢, –ü–ï–†–ï–ö–õ–´–î–´–í–ê–ï–¢
async def move_select_thing_backpack_storage(
        tg_id: int | None=None,
        value_pocket_cell: int | None=None, # —Å–∫–æ–ª—å–∫–æ –≤–µ—â–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞—Ä–º–∞–Ω–µ / —è—á–µ–π–∫–µ
        button_value: int | None=None,
        #value_storage: int,
        clb_action: str = ' ',
        prefix: str = ' ',
        backpack: str = ' ' ,
        pocket_cell: str = ' ' ,
        clb_name: str = ' ' ,
        clb_back: str = ' '
) -> int | None:
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤–µ—â–∏ –∏–∑ –∫–∞—Ä–º–∞–Ω–æ–≤ –∏ —Ä—é–∫–∑–∞–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""

    logging.info(f"move_select_thing_backpack_storage --- button_value = {button_value}")

    # b4!1!put_in_storage!backpack_leana!pocket2!bandages!6

    if clb_action == 'put_in_storage':
        if button_value == 777: # –¥–æ –ø–æ–ª–Ω–æ–≥–æ
            button_value = 20 - value_pocket_cell
        elif button_value == 333: # –≤—Å–µ
            button_value = value_pocket_cell
        elif clb_name in LSWG: # –µ—Å–ª–∏ –±—Ä–æ–Ω—è / –æ—Ä—É–∂–∏–µ, —Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            button_value = value_pocket_cell

        value = value_pocket_cell-button_value
        logging.info(f"–í–†–ï–ú–ï–ù–ù–û 794 value={value}")


    elif clb_action == 'dologit':
        #logging.info(f"–í–†–ï–ú–ï–ù–ù–û 798 button_value = {button_value} --- value_pocket_cell={value_pocket_cell} --- ")
        if button_value == 777: # –¥–æ –ø–æ–ª–Ω–æ–≥–æ
            button_value = 20 - value_pocket_cell
            #logging.info(f"–í–†–ï–ú–ï–ù–ù–û 801 button_value = {button_value} --- value_pocket_cell={value_pocket_cell} --- ")
        elif button_value == 333: # –≤—Å–µ
            button_value = (await rq.get_StorageTrash(tg_id=tg_id))[clb_name]
            #logging.info(f"–í–†–ï–ú–ï–ù–ù–û 804 button_value = {button_value} --- value_pocket_cell={value_pocket_cell} ---")
        elif clb_name in LSWG: # –µ—Å–ª–∏ –±—Ä–æ–Ω—è / –æ—Ä—É–∂–∏–µ, —Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            button_value = value_pocket_cell
        value = value_pocket_cell+button_value
        logging.info(f"–í–†–ï–ú–ï–ù–ù–û 808 button_value = {button_value} --- value_pocket_cell={value_pocket_cell} --- value={value}")


    # —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä—é–∫–∑–∞–∫–µ = value_pocket_cell
    # –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä—é–∫–∑–∞–∫–µ = value_pocket_cell - button_value
    if pocket_cell == 'pocket1':
        await rq.set_pocket1(tg_id=tg_id, name_column=clb_name, current_value=value)
    elif pocket_cell == 'pocket2':
        await rq.set_pocket2(tg_id=tg_id, name_column=clb_name, current_value=value)

    if backpack == Backpack.backpack_foliage and pocket_cell.startswith('cell'): # —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–æ —Å—é–¥–∞, –µ—Å–ª–∏ –≤ –∫–∞—Ä–º–∞–Ω—ã –∑–∞—à–ª–æ
        if pocket_cell == 'cell_1':
            await rq.set_b_foliage_cell_1(tg_id=tg_id, name_column=clb_name, current_value=value)
        elif pocket_cell == 'cell_2':
            await rq.set_b_foliage_cell_2(tg_id=tg_id, name_column=clb_name, current_value=value)

    elif backpack == Backpack.backpack_leana and pocket_cell.startswith('cell'): # —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–æ —Å—é–¥–∞, –µ—Å–ª–∏ –≤ –∫–∞—Ä–º–∞–Ω—ã –∑–∞—à–ª–æ
        if pocket_cell == 'cell_1':
            await rq.set_b_leana_cell_1(tg_id=tg_id, name_column=clb_name, current_value=value)
        elif pocket_cell == 'cell_2':
            await rq.set_b_leana_cell_2(tg_id=tg_id, name_column=clb_name, current_value=value)
        elif pocket_cell == 'cell_3':
            await rq.set_b_leana_cell_3(tg_id=tg_id, name_column=clb_name, current_value=value)
        elif pocket_cell == 'cell_4':
            await rq.set_b_leana_cell_4(tg_id=tg_id, name_column=clb_name, current_value=value)

    # —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - —á–µ—Ä–µ–∑ value_storage=rq.get
    # –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä—é–∫–∑–∞–∫–µ = value_storage + button_value
    if clb_name in LST and clb_action == 'put_in_storage':
        # cvs = current_value_storage
        cvs = (await rq.get_StorageTrash(tg_id=tg_id))[clb_name]
        await rq.set_storage_trash(tg_id=tg_id, name_column=clb_name, current_value=cvs+button_value)
    elif clb_name in LST and clb_action == 'dologit':
        # cvs = current_value_storage
        cvs = (await rq.get_StorageTrash(tg_id=tg_id))[clb_name]
        await rq.set_storage_trash(tg_id=tg_id, name_column=clb_name, current_value=cvs-button_value)
        value_storage_dologit = button_value
        return value_storage_dologit
    elif clb_name in LSW:
        cvs = (await rq.get_StorageWardrobe(tg_id=tg_id))[clb_name]
        await rq.set_storage_wardrobe(tg_id=tg_id, name_column=clb_name, current_value=f"{cvs}!{button_value}")
    elif clb_name in LSG:
        cvs = (await rq.get_StorageGun(tg_id=tg_id))[clb_name]
        await rq.set_storage_gun(tg_id=tg_id, name_column=clb_name, current_value=f"{cvs}!{button_value}")


# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–æ–π –≤–µ—â–∏, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –≤ —è—á–µ–π–∫–µ / –∫–∞—Ä–º–∞–Ω–µ –Ω–∞–¥–µ—Ç–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞
async def what_thing_value_in_the_pocket_cell_put_on_backpack(
        tg_id:int,
        pocket_cell: str,
        backpack: str|None=None
) -> list:
    """–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ 1 —ç–ª–µ–º–µ–Ω—Ç = –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏ 2 —ç–ª–µ–º–µ–Ω—Ç = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ/–ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ç–æ–π –≤–µ—â–∏,
    –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –≤ –í–•–û–î. –î–ê–ù.—è—á–µ–π–∫–µ/–∫–∞—Ä–º–∞–Ω–µ –Ω–∞–¥–µ—Ç–æ–≥–æ —Ä—é–∫–∑–∞–∫–∞, —á—Ç–æ–±—ã –∏–∑ —è—á–µ–π–∫–∏ —Ä—é–∫–∑–∞–∫–∞ –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å 'backpack'"""

    logging.info('what_thing_value_in_the_pocket_cell_put_on_backpack')


    if pocket_cell == 'pocket1':
        dict_ = await rq.get_Pocket1(tg_id=tg_id)
    elif pocket_cell == 'pocket2':
        dict_ = await rq.get_Pocket2(tg_id=tg_id)

    if backpack:
        if backpack == "backpack_foliage":
            if pocket_cell == "cell_1":
                dict_ = await rq.get_BFoliageCell_1(tg_id=tg_id)
            elif pocket_cell == "cell_2":
                dict_ = await rq.get_BFoliageCell_2(tg_id=tg_id)

        if backpack == "backpack_leana":
            if pocket_cell == "cell_1":
                dict_ = await rq.get_BLeanaCell_1(tg_id=tg_id)
            elif pocket_cell == "cell_2":
                dict_ = await rq.get_BLeanaCell_2(tg_id=tg_id)
            elif pocket_cell == "cell_3":
                dict_ = await rq.get_BLeanaCell_3(tg_id=tg_id)
            elif pocket_cell == "cell_4":
                dict_ = await rq.get_BLeanaCell_4(tg_id=tg_id)
    #logging.info(f" --- dict_ = {dict_ if dict_ else None} {True if dict_ else False}")
    if dict_:
        key=(list(dict_))[0]
        value = dict_[key]
        #logging.info(f"key = {key} --- value = {value}")
        return [key, value]
    return [None, 0]



# –°–Ω–∏–º–∞–µ—Ç –Ω–∞–¥–µ—Ç—É—é –±—Ä–æ–Ω—é –∏–ª–∏ –æ—Ä—É–∂–∏–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∏–ª–∏ –≤ —Ä—é–∫–∑–∞–∫, –∏–ª–∏ –≤ –•—Ä–∞–Ω–∏–ª–∏—â–µ
async def put_off_armor_or_gun_and_take_this_on_wardrobe_or_backpack(
        tg_id: int,
        armor_or_gun: str, #backpack_foliage, helmet_kosmonavt, G17, spear
        wardrobe_or_backpack: str,
        cell: str | None=None,
        hand: str | None=None
) -> str: # new_percent
    """–°–Ω–∏–º–∞–µ—Ç –Ω–∞–¥–µ—Ç—É—é –±—Ä–æ–Ω—é –∏–ª–∏ –æ—Ä—É–∂–∏–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∏–ª–∏ –≤ —Ä—é–∫–∑–∞–∫, –∏–ª–∏ –≤ –•—Ä–∞–Ω–∏–ª–∏—â–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–∑ –•–ü"""

    logging.info('put_off_armor_or_gun_and_take_this_on_wardrobe_or_backpack')

    data_user = await rq.get_user_dict(tg_id=tg_id)

    if '_' in armor_or_gun: # –µ—Å–ª–∏ '_' –µ—Å—Ç—å, —Ç–æ –≤–µ—â—å - –Ω–µ –æ—Ä—É–∂–∏–µ
        name_column_User = armor_or_gun.split('_')[0]
        thing_percent = data_user[name_column_User]
    else: # –∞ –µ—Å–ª–∏ –æ—Ä—É–∂–∏–µ, —Ç–æ name_column_User —ç—Ç–æ –∫–∞–∫–∞—è-—Ç–æ —Ä—É–∫–∞
        name_column_User = hand # –ø—Ä–∏—à–ª–æ –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
        thing_percent = data_user[name_column_User]
    logging.info(f'name_column_User = {name_column_User} --- armor_or_gun = {armor_or_gun} --- thing_percent = {thing_percent}')

    if '!' in thing_percent: # –º—ã –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ user –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –•–ü –≤–µ—â–∏, –Ω–∞ –∑–¥–µ—Å—å –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑ –•–ü
        percent = thing_percent.split('!')[-1]

    xp = data_user[f'xp_{name_column_User}']
    new_percent = (100 * xp) / dict_percent_xp[armor_or_gun]
    if new_percent >= 1:
        new_percent = str(round(new_percent))
    else:
        new_percent = str(int(new_percent))

    logging.info(f'name_column_User = {name_column_User} --- armor_or_gun = {armor_or_gun} --- thing_percent = {thing_percent} --- new_percent = {new_percent} ---- xp = {xp}')

    # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    # —Å–ø–µ—Ä–≤–∞ —à–∫–∞—Ñ
    if wardrobe_or_backpack == 'wardrobe':
        if name_column_User in ['backpack', 'helmet', 'dress', 'shoes']:
            if name_column_User != 'backpack': # –¥–ª—è 'helmet', 'dress', 'shoes' –ø—É—Å—Ç—ã–µ '' —è—á–µ–π–∫–∏
                # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ User –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–µ—â–∏
                await rq.set_user(tg_id=tg_id, name_column=name_column_User, current_value='')
            else: # –¥–ª—è —Ä—é–∫–∑–∞–∫–∞ 'no_backpack'
                await rq.set_user(tg_id=tg_id, name_column=name_column_User, current_value='no_backpack')
            # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ 0 –≤ —Ç–∞–±–ª–∏—Ü–µ User –≤ XP_–Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–µ—â–∏
            await rq.set_user(tg_id, f'xp_{name_column_User}', 0)

            data_ = await rq.get_StorageWardrobe(tg_id=tg_id)
            new_value = data_[armor_or_gun]+'!'+new_percent
            await rq.set_storage_wardrobe(tg_id, armor_or_gun, new_value)

        elif name_column_User in ['left_hand', 'right_hand']:
            await rq.set_user(tg_id=tg_id, name_column=name_column_User, current_value='')
            # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ 0 –≤ —Ç–∞–±–ª–∏—Ü–µ User –≤ XP_–Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–µ—â–∏
            await rq.set_user(tg_id, f'xp_{name_column_User}', 0)
            data_ = await rq.get_StorageGun(tg_id=tg_id)
            new_value = str(data_[armor_or_gun])+'!'+new_percent
            await rq.set_storage_gun(tg_id, armor_or_gun, new_value)

    elif wardrobe_or_backpack == 'backpack': # –µ—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞–¥–æ –≤ —Ä—é–∫–∑–∞–∫
        backpack_put_on = await what_backpack_put_on(tg_id=tg_id)
        await set_value_in_pocket_cell_put_on_backpack(
            tg_id=tg_id,
            backpack=backpack_put_on,
            pocket_cell=cell,
            clb_name=armor_or_gun,
            value=new_percent
        )

    return new_percent
#        if backpack_put_on == Backpack.backpack_foliage:
#            if cell == 'cell_1':
#                await rq.set_backpack_foliage(tg_id, armor_or_gun, 20)
#            elif cell == 'cell_2':
#                await rq.set_backpack_foliage(tg_id, armor_or_gun, 20)
#        elif backpack_put_on == Backpack.backpack_leana:
#            if cell == 'cell_1':
#                await rq.set_backpack_leana(tg_id, armor_or_gun, 20)
#            elif cell == 'cell_2':
#                await rq.set_backpack_leana(tg_id, armor_or_gun, 20)
#            elif cell == 'cell_3':
#                await rq.set_backpack_leana(tg_id, armor_or_gun, 20)
#            elif cell == 'cell_4':
#                await rq.set_backpack_leana(tg_id, armor_or_gun, 20)




# # –î–ï–ô–°–¢–í–ò–Ø
# 1 –ó–∞–±–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä—é–∫–∑–∞–∫ –∫–∞–∫ –º–æ–∂–µ–º
# 2 –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–µ—â–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–± —ç—Ç–∏—Ö –≤–µ—â–∞—Ö –∏–≥—Ä–æ–∫–∞,
# 3 –Ω–∞–¥–µ–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä—é–∫–∑–∞–∫,
# 4 —Å—Ç–∞—Ä—ã–π –∫–ª–∞–¥–µ–º –≤ —à–∫–∞—Ñ
# 5 –∫–Ω–æ–ø–∫–∞ –æ–∫ –ø—Ä–µ–º–µ—â–∞–µ—Ç –≤ checking_where_avatar_is_located
async def things_put_on_in_backpack_foliage_after_put_on_in_storages(tg_id: int, percent_backpack_foliage: str) -> list[str, dict]:
    """ # 1 –ó–∞–±–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä—é–∫–∑–∞–∫ –∫–∞–∫ –º–æ–∂–µ–º
        #    –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è landing_place —Ç–æ
        # 2 –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–µ—â–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–± —ç—Ç–∏—Ö –≤–µ—â–∞—Ö –∏–≥—Ä–æ–∫–∞,
            –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –ù–ï landing_place —Ç–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–µ—â–∏ –ø–æ–º–µ—â–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –≤—ã—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç–µ—Ä–µ (—Å –≤–µ—â–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ)
        # 3 –Ω–∞–¥–µ–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä—é–∫–∑–∞–∫,
        # 4 —Å—Ç–∞—Ä—ã–π –∫–ª–∞–¥–µ–º –≤ —à–∫–∞—Ñ
        # 5 –∫–Ω–æ–ø–∫–∞ –æ–∫ –ø—Ä–µ–º–µ—â–∞–µ—Ç –≤ checking_where_avatar_is_located"""

    logging.info('all_things_can_be_moved_from_backpack_with_zero_xp_to_pocket')
    location = (await rq.get_user_dict(tg_id))['location']

    #backpack_put_on = await what_backpack_put_on(tg_id=tg_id)
    #pocket1 = await rq.get_Pocket1(tg_id=tg_id)
    #pocket2 = await rq.get_Pocket2(tg_id=tg_id)
   # common_dict: dict = {}

    #if backpack_put_on == Backpack.backpack_foliage:
     #   cell1 = await rq.get_BLeanaCell_1(tg_id=tg_id)
      #  cell2 = await rq.get_BLeanaCell_2(tg_id=tg_id)

    #elif backpack_put_on == Backpack.backpack_leana:
    cell1 = await rq.get_BLeanaCell_1(tg_id=tg_id)
    cell2 = await rq.get_BLeanaCell_2(tg_id=tg_id)
    cell3 = await rq.get_BLeanaCell_3(tg_id=tg_id)
    cell4 = await rq.get_BLeanaCell_4(tg_id=tg_id)


    if cell1: # –µ—Å–ª–∏ –≤ —è—á–µ–π–∫–µ 1 —á—Ç–æ-—Ç–æ –µ—Å—Ç—å
        await set_value_in_pocket_cell_put_on_backpack(tg_id=tg_id, backpack='backpack_foliage', pocket_cell='cell_1', clb_name=list(cell1.keys())[0], value=list(cell1.values())[0])
        if cell2: # –µ—Å–ª–∏ –ø—Ä–∏ —ç—Ç–æ–º –≤ —è—á–µ–π–∫–µ 2 —Ç–æ–∂–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å
            await set_value_in_pocket_cell_put_on_backpack(tg_id=tg_id, backpack='backpack_foliage', pocket_cell='cell_2', clb_name=list(cell2.keys())[0], value=list(cell2.values())[0])
        else:
            await set_value_in_pocket_cell_put_on_backpack(tg_id=tg_id, backpack='backpack_foliage', pocket_cell='cell_2', clb_name=list(cell3.keys())[0], value=list(cell3.values())[0])
    elif cell2: # –µ—Å–ª–∏ –≤ —è—á–µ–π–∫–µ 1 –Ω–∏—á–µ–≥–æ –Ω–µ—Ç: –∑–∞–Ω–æ—Å–∏–º –≤ –Ω–æ–≤—ã–π —Ä—é–∫–∑–∞–∫ –∏–∑ 2 –∏ 3 —è—á–µ–π–∫–∏, –∞ —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        await set_value_in_pocket_cell_put_on_backpack(tg_id=tg_id, backpack='backpack_foliage', pocket_cell='cell_1', clb_name=list(cell2.keys())[0], value=list(cell2.values())[0])
        await set_value_in_pocket_cell_put_on_backpack(tg_id=tg_id, backpack='backpack_foliage', pocket_cell='cell_2', clb_name=list(cell3.keys())[0], value=list(cell3.values())[0])


    str_return: str = ''
    dict_return: dict = {}

    if cell3 and (cell1 and cell2):
        key = list(cell3.keys())[0]
        value = list(cell3.values())[0]
        if location == Location.landing_place:
            if key in LST:
                value_in_starage = (await rq.get_StorageTrash(tg_id=tg_id))[key]
                await rq.set_storage_trash(tg_id=tg_id, name_column=key, current_value=value_in_starage+value)
            elif key in LSW:
                value_in_starage = (await rq.get_StorageWardrobe(tg_id=tg_id))[key]
                if value_in_starage:
                    await rq.set_storage_wardrobe(tg_id=tg_id, name_column=key, current_value=f"{value_in_starage}!{value}")
                else:
                    await rq.set_storage_wardrobe(tg_id=tg_id, name_column=key, current_value=str(value))

            elif key in LSG:
                value_in_starage = (await rq.get_StorageGun(tg_id=tg_id))[key]
                if value_in_starage:
                    await rq.set_storage_gun(tg_id=tg_id, name_column=key, current_value=f"{value_in_starage}!{value}")
                else:
                    await rq.set_storage_gun(tg_id=tg_id, name_column=key, current_value=str(value))
        str_return = f"{All_Th[key]} {value}\n"
        dict_return[key] = value

    if cell4:
        key = list(cell4.keys())[0]
        value = list(cell4.values())[0]
        if location == Location.landing_place:
            if key in LST:
                value_in_starage = (await rq.get_StorageTrash(tg_id=tg_id))[key]
                await rq.set_storage_trash(tg_id=tg_id, name_column=key, current_value=value_in_starage+value)
            elif key in LSW:
                value_in_starage = (await rq.get_StorageWardrobe(tg_id=tg_id))[key]
                if value_in_starage:
                    await rq.set_storage_wardrobe(tg_id=tg_id, name_column=key, current_value=f"{value_in_starage}!{value}")
                else:
                    await rq.set_storage_wardrobe(tg_id=tg_id, name_column=key, current_value=str(value))

            elif key in LSG:
                value_in_starage = (await rq.get_StorageGun(tg_id=tg_id))[key]
                if value_in_starage:
                    await rq.set_storage_gun(tg_id=tg_id, name_column=key, current_value=f"{value_in_starage}!{value}")
                else:
                    await rq.set_storage_gun(tg_id=tg_id, name_column=key, current_value=str(value))
        str_return += f"{All_Th[key]} {value}"
        dict_return[key] = value
    #if (await rq.get_user_dict(tg_id)['location'])!='landing_place':
    #    return str_return

    # —Å–Ω–∏–º–∞–µ–º —Ä—é–∫–∑–∞–∫ –∏ –∫–ª–∞–¥–µ–º –≤ —à–∫–∞—Ñ
    backpack = (await rq.get_StorageWardrobe(tg_id))[Backpack.backpack_leana]
    data_user_backpack = (await rq.get_user_dict(tg_id))['backpack'].split('!')[-1]
    if backpack:
        await rq.set_storage_wardrobe(tg_id, Backpack.backpack_leana, backpack+'!'+data_user_backpack)### –ø–µ—Ä–µ–≤–æ–¥ —Ö–ø –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑ state, –∞ –ø–æ–∫–∞ % –∏–∑ user
    else:
        await rq.set_storage_wardrobe(tg_id, Backpack.backpack_leana, data_user_backpack)

    # –ó–∞–Ω—É–ª—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –≤ –Ω–∞–¥–µ—Ç–æ–º (–ª–µ–∞–Ω–Ω–æ–º) —Ä—é–∫–∑–∞–∫–µ
    await delete_all_things_from_put_on_backpack(tg_id)

    # —É–±–∏—Ä–∞–µ–º –∏–∑ —à–∫–∞—Ñ–∞ –Ω–∞–¥–µ—Ç—ã–π —Ä—é–∫–∑–∞–∫
    str_backpack_foliage = (await rq.get_StorageWardrobe(tg_id))[Backpack.backpack_foliage]
    new_str_backpack = await modify_str_to_str_del_choise_percent_and_null(str_backpack_foliage, percent_backpack_foliage)
    await rq.set_storage_wardrobe(tg_id, 'backpack_foliage', new_str_backpack)

    logging.info(f'–í–†–ï–ú–ï–ù–ù–û 1088 --- cell1 = {cell1} --- cell2 = {cell2} --- cell3 = {cell3} --- cell4 = {cell4} --- str_return = {str_return} --- backpack = {backpack} --- dict_return = {dict_return}')
    return [str_return, dict_return]



# –ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—â–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—é–∫–∑–∞–∫–∞. –í–µ—â–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∫–ª–∞–¥—É—Ç—Å—è –≤ —ç—Ç–æ—Ç —Ä—é–∫–∑–∞–∫
async def put_in_backpack_things_from_dict(tg_id: int, dict_things: dict, backpack: str) -> None:
    """ –ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—â–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—é–∫–∑–∞–∫–∞. –í–µ—â–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∫–ª–∞–¥—É—Ç—Å—è –≤ —ç—Ç–æ—Ç —Ä—é–∫–∑–∞–∫"""

    logging.info('put_in_backpack_things_from_dict')
    if len(dict_things)>2:
        logging.info(f'put_in_backpack_things_from_dict --- –î–õ–ò–ù–ê –°–õ–û–í–ê–†–Ø = {len(dict_things)}')
        return

    for key, value in dict_things.items():
        if backpack == Backpack.backpack_foliage:
            cell_1 = await rq.get_BFoliageCell_1(tg_id)
            cell_2 = await rq.get_BFoliageCell_2(tg_id)
            if '!' not in str(value):
                if not cell_1:
                    await rq.set_b_foliage_cell_1(tg_id, key, int(value))
                else:
                    await rq.set_b_foliage_cell_2(tg_id, key, int(value))
            else:
                list_value = value.split('!')
                await rq.set_b_foliage_cell_1(tg_id, key, int(list_value[0]))
                await rq.set_b_foliage_cell_2(tg_id, key, int(list_value[1]))

        elif backpack == Backpack.backpack_leana:
            cell_1 = await rq.get_BLeanaCell_1(tg_id)
            if '!' not in str(value):
                if not cell_1:
                    await rq.set_b_leana_cell_1(tg_id, key, int(value))
                else:
                    await rq.set_b_leana_cell_2(tg_id, key, int(value))
            else:
                list_value = value.split('!')
                await rq.set_b_leana_cell_1(tg_id, key, int(list_value[0]))
                await rq.set_b_leana_cell_2(tg_id, key, int(list_value[1]))



# –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –•–ü –∏–≥—Ä–æ–∫–∞. –≤—ã—á–∏—Ç–∞–µ—Ç 1 –µ–¥–∏–Ω–∏—Ü—É –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ —Ç–æ–≥–æ –º–µ—Å—Ç–∞ –æ—Ç–∫—É–¥–∞ –≤–∑—è–ª–∏ –µ–≥–æ
async def recover_xp_subtracts_drug(tg_id: int, pocket_cell: str, name_drug: str, value_drug: int|str, backpack: str|None=None) -> list:
    """ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –•–ü –∏–≥—Ä–æ–∫–∞. –≤—ã—á–∏—Ç–∞–µ—Ç 1 –µ–¥–∏–Ω–∏—Ü—É –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ —Ç–æ–≥–æ –º–µ—Å—Ç–∞ –æ—Ç–∫—É–¥–∞ –≤–∑—è–ª–∏ –µ–≥–æ"""

    logging.info('recover_xp_subtracts_drug')
    value_xp = (await rq.get_user_dict(tg_id=tg_id))['xp']

    if value_xp < 100 - int(dict_u[name_drug]):
        value_xp+=int(dict_u[name_drug])
    else:
        value_xp = 100

    await rq.set_user_xp(tg_id=tg_id, current_xp=value_xp)

    await set_value_in_pocket_cell_put_on_backpack(
        tg_id=tg_id, backpack=backpack,
        pocket_cell=pocket_cell,
        clb_name=name_drug,
        value=int(value_drug)-1
    )
    flag = True
    quantity_drugs = await what_thing_value_in_the_pocket_cell_put_on_backpack(tg_id, pocket_cell)
    if quantity_drugs[-1] < 1:
        flag = False

    return [value_xp, flag]



# dict_armor = {'helmet_kosmonavt': ['–®–ª–µ–º –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞ - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–ª–µ–º –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞.\n–ì—Ä–∞–º–æ—Å—Ç–∫–∏,—Ç—è–∂–µ–ª—ã–π –∏ –Ω–µ—É–¥–æ–±–Ω—ã–π.', 5, 35, 45, 5000],
# —Ä–∞—Å—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –±—Ä–æ–Ω–µ, —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ö–ø –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤–∫–∏ —ç—Ç–æ–π –±—Ä–æ–Ω–∏ (–Ω–∞ –≤—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ [—à–ª–µ–º, –∫–æ—Å—Ç—é–º, –æ–±—É–≤—å])
async def armor_damage_subtracts_xp_percent(tg_id: int, list_demage: list, list_armor:list|None=None) -> list:
    """—Ä–∞—Å—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –±—Ä–æ–Ω–µ, —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ö–ø –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤–∫–∏ —ç—Ç–æ–π –±—Ä–æ–Ω–∏ (–Ω–∞ –≤—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ [—à–ª–µ–º, –∫–æ—Å—Ç—é–º, –æ–±—É–≤—å])"""

    logging.info(f'armor_damage_subtracts_xp_percent ----- list_demage = {list_demage}')

    data_user = await rq.get_user_dict(tg_id=tg_id)

    if data_user['helmet']:# –µ—Å–ª–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞–¥–µ—Ç —à–ª–µ–º
        helmet = data_user['helmet'].split('!')[0] # –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–¥–µ—Ç–æ–≥–æ —à–ª–µ–º–∞ –∏–∑ –ë–î
        xp_helmet = data_user['xp_helmet'] # –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –•–ü –∏–∑ –ë–î
        percent_helmet = xp_helmet*100/dict_armor[helmet][4] # –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –µ–º—É %

        helmet_b = dict_armor[helmet][1]/100*percent_helmet  # 5/100*5 = 0.25 (0%)    | 5/100*95 = 4.75 (5%)
        helmet_x = dict_armor[helmet][2]/100*percent_helmet  # 35/100*5 = 1.75 (2%)   | 35/100*95 = 33.25 (33%)
        helmet_e = dict_armor[helmet][3]/100*percent_helmet  # 45/100*5 = 2.25 (2%)   | 35/100*95 = 42.75 (43%)
        helmet_b = round(helmet_b) if helmet_b>1 else int(helmet_b)
        helmet_x = round(helmet_x) if helmet_x>1 else int(helmet_x)
        helmet_e = round(helmet_e) if helmet_e>1 else int(helmet_e)

        demage = list_demage[0]-(list_demage[0]/100*helmet_b) + list_demage[1]-(list_demage[1]/100*helmet_x) + list_demage[2]-(list_demage[2]/100*helmet_e)
        demage = round(demage) if demage>1 else int(demage)
        new_xp_helmet = xp_helmet-demage

        if new_xp_helmet > 0:
            new_percent_helmet = new_xp_helmet*100/dict_armor[helmet][4]
            new_percent_helmet = round(new_percent_helmet) if new_percent_helmet>1 else int(new_percent_helmet)
            logging.info(f'\nlist_demage = {list_demage}\nhelmet_b = {helmet_b}\nhelmet_x = {helmet_x}\nhelmet_e = {helmet_e}\ndemage = {demage}\nnew_xp_helmet = {new_xp_helmet}\nnew_percent_helmet = {new_percent_helmet}')
            if new_percent_helmet > 0:
                await rq.set_user(tg_id=tg_id, name_column='helmet', current_value=f'{helmet}!{new_percent_helmet}')
                await rq.set_user(tg_id=tg_id, name_column='xp_helmet', current_value=new_xp_helmet)
                return [demage, helmet, new_percent_helmet]
            else:
                await rq.set_user(tg_id=tg_id, name_column='helmet', current_value='')
                return [demage, helmet, 0] # –ï—Å–ª–∏ 3 —ç–ª–µ–º–µ–Ω—Ç = 0, —Ç–æ —ç—Ç–∞ –±—Ä–æ–Ω—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞

    if data_user['dress']:
        dress = data_user['dress'].split('!')[0]
        xp_dress = data_user['xp_dress']
        percent_dress = xp_dress*100/dict_armor[dress][4]

        dress_b = dict_armor[dress][1]/100*percent_dress  # 5/100*5 = 0.25 (0%)    | 5/100*95 = 4.75 (5%)
        dress_x = dict_armor[dress][2]/100*percent_dress  # 35/100*5 = 1.75 (2%)   | 35/100*95 = 33.25 (33%)
        dress_e = dict_armor[dress][3]/100*percent_dress  # 45/100*5 = 2.25 (2%)   | 35/100*95 = 42.75 (43%)
        dress_b = round(dress_b) if dress_b>1 else int(dress_b)
        dress_x = round(dress_x) if dress_x>1 else int(dress_x)
        dress_e = round(dress_e) if dress_e>1 else int(dress_e)

        demage = list_demage[0]-(list_demage[0]/100*dress_b) + list_demage[1]-(list_demage[1]/100*dress_x) + list_demage[2]-(list_demage[2]/100*dress_e)
        demage = round(demage) if demage>1 else int(demage)
        new_xp_dress = xp_dress-demage
        if new_xp_dress > 0:
            new_percent_dress = new_xp_dress*100/dict_armor[dress][4]
            new_percent_dress = round(new_percent_dress) if new_percent_dress>1 else int(new_percent_dress)
            logging.info(f'\nlist_demage = {list_demage}\ndress_b = {dress_b}\ndress_x = {dress_x}\ndress_e = {dress_e}\ndemage = {demage}\nnew_xp_dress = {new_xp_dress}\nnew_percent_dress = {new_percent_dress}')
            if new_percent_dress > 0:
                await rq.set_user(tg_id=tg_id, name_column='dress', current_value=f'{dress}!{new_percent_dress}')
                await rq.set_user(tg_id=tg_id, name_column='xp_dress', current_value=new_xp_dress)
                return [demage, dress, new_percent_dress]
            else:
                await rq.set_user(tg_id=tg_id, name_column='dress', current_value='')
                return [demage, dress, 0] # –ï—Å–ª–∏ 3-–π —ç–ª–µ–º–µ–Ω—Ç 0, —Ç–æ —ç—Ç–∞ –±—Ä–æ–Ω—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞


    if data_user['shoes']:
        shoes = data_user['shoes'].split('!')[0]
        xp_shoes = data_user['xp_shoes']
        percent_shoes = xp_shoes*100/dict_armor[shoes][4]

        shoes_b = dict_armor[shoes][1]/100*percent_shoes  # 5/100*5 = 0.25 (0%)    | 5/100*95 = 4.75 (5%)
        shoes_x = dict_armor[shoes][2]/100*percent_shoes  # 35/100*5 = 1.75 (2%)   | 35/100*95 = 33.25 (33%)
        shoes_e = dict_armor[shoes][3]/100*percent_shoes  # 45/100*5 = 2.25 (2%)   | 35/100*95 = 42.75 (43%)
        shoes_b = round(shoes_b) if shoes_b>1 else int(shoes_b)
        shoes_x = round(shoes_x) if shoes_x>1 else int(shoes_x)
        shoes_e = round(shoes_e) if shoes_e>1 else int(shoes_e)
        demage = list_demage[0]-(list_demage[0]/100*shoes_b) + list_demage[1]-(list_demage[1]/100*shoes_x) + list_demage[2]-(list_demage[2]/100*shoes_e)
        demage = round(demage) if demage>1 else int(demage)
        new_xp_shoes = xp_shoes-demage
        if new_xp_shoes > 0:
            new_percent_shoes = new_xp_shoes*100/dict_armor[shoes][4]
            new_percent_shoes = round(new_percent_shoes) if new_percent_shoes>1 else int(new_percent_shoes)
            logging.info(f'\nlist_demage = {list_demage}\nshoes_b = {shoes_b}\nshoes_x = {shoes_x}\nshoes_e = {shoes_e}\ndemage = {demage}\nnew_xp_shoes = {new_xp_shoes}\nnew_percent_shoes = {new_percent_shoes}')
            if new_percent_shoes > 0:
                await rq.set_user(tg_id=tg_id, name_column='shoes', current_value=f'{shoes}!{new_percent_shoes}')
                await rq.set_user(tg_id=tg_id, name_column='xp_shoes', current_value=new_xp_shoes)
                return [demage, shoes, new_percent_shoes]
            else:
                await rq.set_user(tg_id=tg_id, name_column='shoes', current_value='')
                return [demage, shoes, 0] # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —ç—Ç–∞ –±—Ä–æ–Ω—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞

    ### demage = —Å—É–º–º–∏—Ä—É–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –∏–∑ —Ö–ø –∏–≥—Ä–æ–∫–∞
    demage = list_demage[0] + list_demage[1] + list_demage[2]
    new_xp_user = (data_user['xp']-demage) if (data_user['xp']-demage) > 0 else 0
    await rq.set_user(tg_id, 'xp', new_xp_user)
    return [demage]



#dict_gun: dict = {
#    'G17': [[0,0,0], [35,0,0], [45,0,10]], # –¥–∞–ª—å–Ω–∏–π - —Å—Ä–µ–¥–Ω–∏–π - –±–ª–∏–∂–Ω–∏–π /// –±–∞–ª–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π - —Ö–∏–º–∏—á–µ—Å–∫–∏–π - —ç–ª–µ–∫—Ç—Ä–æ
#    'spear': [[0,0,0], [0,0,0], [30,25,5]],
#    'nothink': [[0,0,0], [0,0,0], [5,2,0]],
#    }

#dict_NPS: dict = {
#    'luvron_polevoy': [[25, 10, 0], [5, 10, 5]], # –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–∞–¥–µ–Ω–∏–µ, –≤—Ç–æ—Ä–æ–π –∑–∞—â–∏—Ç–∞
#    'blue_rabbit': [[5, 3, 0], [2, 2, 5]],
#    'daron': [[5, 10, 35], [35, 15, 0], [25, 5, 25]], # –ø–µ—Ä–≤—ã–π –∏ –≤—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–∞–¥–µ–Ω–∏–µ (—Å—Ä–µ–¥–Ω–µ–µ), —Ç—Ä–µ—Ç–∏–π –∑–∞—â–∏—Ç–∞
#}
async def demage_nps_subtracts_xp_gun(tg_id: int, name_nps: str, gun: str, distance: int, hand: str) -> int: # —É—Ä–æ–Ω –º–æ–Ω—Å—Ç—Ä—É –≤ –•–ü
    """—Ä–∞—Å—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –ù–ü–°, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –•–ü –æ—Ä—É–∂–∏—è, –Ω–∞ –≤—ã—Ö–æ–¥–µ —É—Ä–æ–Ω –ù–ü–°–∞ –≤ –•–ü"""

    logging.info(f'demage_nps')

    dict_user = await rq.get_user_dict(tg_id=tg_id)
    # —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ö–ø –æ—Ä—É–∂–∏—è –Ω–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É –∏ —É–¥–∞–ª–µ–Ω–∏–µ –µ–≥–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –ë–î, –µ—Å–ª–∏ –•–ü —Å–Ω–∏–∑–∏–ª–æ—Å—å –¥–æ –Ω—É–ª—è
    xp_gun = dict_user[f'xp_{hand}']
    logging.info(f'xp_gun = {xp_gun}')
    # gun –∏ hand –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏, gun –ª–µ–∂–∏—Ç –≤ hand
    if gun in ['G17', 'spear']: # —É–º–µ–Ω—å—à–µ–Ω–∏–µ –•–ü –æ—Ä—É–∂–∏—è —Ç–æ–ª—å–∫–æ —É G17 –∏ spear, —É –∫—É–ª–∞–∫–æ–≤ xp –Ω–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
        if xp_gun > 1:
            await rq.set_user(tg_id, f'xp_{hand}', xp_gun-1)
            logging.info(f'xp_gun = {xp_gun-1} ---------- xp_hand = xp_{hand}')
        else: # –µ—Å–ª–∏ —Ö–ø 0, —Ç–æ –æ—Ä—É–∂–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è
            await rq.set_user(tg_id, hand, '')
            await rq.set_user(tg_id, f'xp_{hand}', 0)
            logging.info(f'xp_gun = {0}')

    demage_nps: int = 0
    for elem in range (3):
        logging.info(f'\ndemage_nps[{elem}] = {demage_nps}')
        demage_nps += ((100 - dict_NPS[name_nps][distance][elem])/100) * dict_gun[gun][-distance][elem]

    return demage_nps



async def change_xp_percent_and_back(name_thing: str, percent: int | None=None, xp: int | None=None) -> int:
    """–ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –•–ü –∏–ª–∏ –•–ü –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã"""
    logging.info(f'change_xp_percent_and_back')

    if percent:
        xp = round((dict_percent_xp[name_thing] / 100) *percent)
        logging.info(f'xp = {xp}')
        return xp
    if xp:
        percent = xp / (dict_percent_xp[name_thing] / 100)
        percent = round(percent) if percent >= 1 else int(percent)
        logging.info(f'percent = {percent}')
        return percent
